{"file_contents":{"README.md":{"content":"# EduHire Faculty - Academic Job Marketplace\n\nA comprehensive faculty jobs marketplace built with Next.js, Firebase, and TypeScript. This platform connects academic professionals with educational institutions across India, featuring role-based access control, admin approval workflows, and comprehensive job management.\n\n## 🌟 Features\n\n### Core Functionality\n- **Role-based Access Control**: Seekers, Employers, and Admins with distinct permissions\n- **Mandatory Email Verification**: All protected actions require verified email addresses\n- **Admin Approval Workflows**: Employers and job postings require admin approval\n- **Comprehensive Job Search**: Advanced filtering by department, location, salary, and more\n- **File Upload System**: Resume uploads for seekers, document verification for employers\n- **Real-time Notifications**: Email notifications for key platform events\n- **Audit Logging**: Complete activity tracking for administrative oversight\n\n### User Roles\n\n#### **Job Seekers (Faculty)**\n- Create and manage professional profiles\n- Upload and manage resumes (PDF only, 5MB limit)\n- Search and filter job opportunities\n- Apply to approved positions\n- Track application status and history\n- Receive status update notifications\n\n#### **Employers (Institutions/HR)**\n- Company profile setup with verification documents\n- Job posting creation and management\n- Application review and candidate management\n- Status updates for applicants\n- Dashboard analytics and insights\n\n#### **Administrators**\n- Employer verification and approval\n- Job posting moderation\n- User role management\n- Platform analytics and reporting\n- Abuse report handling\n- System audit logs\n\n## 🏗️ Tech Stack\n\n### Frontend\n- **Next.js 14** with App Router and TypeScript\n- **Tailwind CSS** with shadcn/ui components\n- **React Hook Form** with Zod validation\n- **TanStack Query** for data fetching and caching\n- **Lucide Icons** for consistent iconography\n\n### Backend\n- **Firebase Authentication** (Email/Password, Google, Phone OTP)\n- **Cloud Firestore** for data storage\n- **Firebase Storage** for file uploads\n- **Cloud Functions** for server-side logic\n- **Firebase Admin SDK** for privileged operations\n\n### Additional Services\n- **SendGrid** for email notifications\n- **Firebase Security Rules** for data protection\n- **Firebase Emulator Suite** for local development\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ and npm\n- Firebase CLI (`npm install -g firebase-tools`)\n- Firebase project with enabled services\n- SendGrid account for email notifications\n\n### 1. Firebase Project Setup\n\n1. Create a new Firebase project at [Firebase Console](https://console.firebase.google.com/)\n2. Enable the following services:\n   - **Authentication**: Email/Password, Google providers\n   - **Cloud Firestore**: Production mode\n   - **Cloud Storage**: Default bucket\n   - **Cloud Functions**: Node.js 18 runtime\n\n3. In Authentication > Settings:\n   - Add your development domain (localhost:5000) to authorized domains\n   - After deployment, add your production domain\n\n4. Get your Firebase configuration from Project Settings > General > Your apps\n\n### 2. Environment Configuration\n\n1. Copy the environment template:\n```bash\ncp .env.example .env.local\n","size_bytes":3245},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { \n  InstituteType, \n  Department, \n  JobLevel, \n  EmploymentType,\n  JobSearchFilters \n} from \"@shared/schema\";\nimport { validateFirebaseToken } from \"./services/firebase-admin\";\nimport { sendEmail } from \"./services/email\";\nimport { storage } from \"./storage\";\n\n// User interface is now extended globally via types/express.d.ts\n\n// API Response helper\nconst createApiResponse = (data?: any, error?: string, message?: string) => ({\n  success: !error,\n  data,\n  error,\n  message,\n});\n\n// Middleware to validate Firebase token\nconst authenticateUser = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json(createApiResponse(null, 'No token provided'));\n    }\n\n    const decodedToken = await validateFirebaseToken(token);\n    req.user = decodedToken as any; // Compatible with optional fields\n    next();\n  } catch (error) {\n    res.status(401).json(createApiResponse(null, 'Invalid token'));\n  }\n};\n\n// Middleware to check email verification\nconst requireEmailVerification = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.user?.email_verified) {\n    return res.status(403).json(createApiResponse(null, 'Email verification required'));\n  }\n  next();\n};\n\n// Middleware to check user role\nconst requireRole = (roles: string[]) => (req: Request, res: Response, next: NextFunction) => {\n  const userRole = req.user?.role || 'seeker';\n  if (!roles.includes(userRole)) {\n    return res.status(403).json(createApiResponse(null, 'Insufficient permissions'));\n  }\n  next();\n};\n\n// Validation schemas\nconst companySchema = z.object({\n  name: z.string().min(2),\n  website: z.string().url().optional(),\n  instituteType: InstituteType,\n  hrEmail: z.string().email(),\n  phone: z.string().optional(),\n  address: z.string().min(10),\n});\n\nconst jobSchema = z.object({\n  title: z.string().min(5),\n  department: Department,\n  level: JobLevel,\n  instituteType: InstituteType,\n  employmentType: EmploymentType,\n  location: z.object({\n    city: z.string(),\n    state: z.string(),\n    country: z.string().default('India'),\n  }),\n  minSalary: z.number().optional(),\n  maxSalary: z.number().optional(),\n  currency: z.string().default('INR'),\n  qualifications: z.array(z.string()).default([]),\n  skills: z.array(z.string()).default([]),\n  responsibilities: z.array(z.string()).default([]),\n  description: z.string().min(50),\n  requirements: z.string().optional(),\n  lastDate: z.string().transform(str => new Date(str)),\n  companyId: z.string(),\n});\n\nconst applicationSchema = z.object({\n  jobId: z.string(),\n  resumePath: z.string(),\n  coverLetter: z.string().optional(),\n});\n\n// Type assertion helper to ensure user is authenticated\nfunction assertUser(req: Request): asserts req is Request & { user: Express.UserPayload } {\n  if (!req.user) {\n    throw new Error('User not authenticated');\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get('/api/health', (req, res) => {\n    res.json(createApiResponse({ status: 'OK', timestamp: new Date().toISOString() }));\n  });\n\n  // Auth routes\n  app.post('/api/auth/send-verification', authenticateUser, async (req, res) => {\n    try {\n      const { email } = req.user;\n      \n      // Send verification email\n      const emailSent = await sendEmail({\n        to: email,\n        subject: 'Verify your EduHire Faculty account',\n        html: `\n          <h1>Welcome to EduHire Faculty!</h1>\n          <p>Please verify your email address by clicking the link below:</p>\n          <p>This is a demo - email verification would be handled by Firebase Auth.</p>\n        `\n      });\n\n      if (emailSent) {\n        res.json(createApiResponse(null, null, 'Verification email sent'));\n      } else {\n        res.status(500).json(createApiResponse(null, 'Failed to send email'));\n      }\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Internal server error'));\n    }\n  });\n\n  // Company routes\n  app.post('/api/companies', authenticateUser, requireEmailVerification, async (req, res) => {\n    try {\n      const validatedData = companySchema.parse(req.body);\n      \n      const company = await storage.createCompany({\n        ...validatedData,\n        ownerUid: req.user.uid,\n        proofDocs: [],\n      });\n\n      res.json(createApiResponse(company));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json(createApiResponse(null, 'Validation error', error.errors[0].message));\n      } else {\n        res.status(500).json(createApiResponse(null, 'Failed to create company'));\n      }\n    }\n  });\n\n  app.get('/api/companies/me', authenticateUser, requireEmailVerification, async (req, res) => {\n    try {\n      const company = await storage.getCompanyByOwner(req.user.uid);\n      res.json(createApiResponse(company));\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Failed to get company'));\n    }\n  });\n\n  app.put('/api/companies/:id', authenticateUser, requireEmailVerification, async (req, res) => {\n    try {\n      const companyId = req.params.id;\n      const validatedData = companySchema.partial().parse(req.body);\n      \n      // Check if user owns the company\n      const company = await storage.getCompany(companyId);\n      if (!company || company.ownerUid !== req.user.uid) {\n        return res.status(403).json(createApiResponse(null, 'Not authorized'));\n      }\n      \n      // Don't allow updates if company is approved (except specific fields)\n      if (company.status === 'approved') {\n        const allowedFields = ['phone', 'address'];\n        const updateData = Object.keys(validatedData).reduce((acc: any, key) => {\n          if (allowedFields.includes(key)) {\n            acc[key] = validatedData[key as keyof typeof validatedData];\n          }\n          return acc;\n        }, {});\n        \n        await storage.updateCompany(companyId, updateData);\n      } else {\n        await storage.updateCompany(companyId, validatedData);\n      }\n      \n      res.json(createApiResponse(null, null, 'Company updated successfully'));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json(createApiResponse(null, 'Validation error', error.errors[0].message));\n      } else {\n        res.status(500).json(createApiResponse(null, 'Failed to update company'));\n      }\n    }\n  });\n\n  // Admin route to get pending companies\n  app.get('/api/admin/companies/pending', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['admin']), \n    async (req, res) => {\n      try {\n        const companies = await storage.getPendingCompanies();\n        res.json(createApiResponse(companies));\n      } catch (error) {\n        res.status(500).json(createApiResponse(null, 'Failed to get pending companies'));\n      }\n    }\n  );\n\n  // Admin route to approve/reject companies\n  app.patch('/api/admin/companies/:id/status', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['admin']), \n    async (req, res) => {\n      try {\n        const companyId = req.params.id;\n        const { status } = req.body;\n        \n        if (!['approved', 'rejected'].includes(status)) {\n          return res.status(400).json(createApiResponse(null, 'Invalid status'));\n        }\n        \n        await storage.updateCompany(companyId, { status });\n        \n        // Log audit entry\n        await storage.createAuditLog({\n          actorUid: req.user.uid,\n          action: status === 'approved' ? 'company_approved' : 'company_rejected',\n          targetType: 'company',\n          targetId: companyId,\n          metadata: { status },\n        });\n        \n        res.json(createApiResponse(null, null, `Company ${status} successfully`));\n      } catch (error) {\n        res.status(500).json(createApiResponse(null, `Failed to ${req.body.status} company`));\n      }\n    }\n  );\n\n  // Job routes\n  app.post('/api/jobs', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['employer']), \n    async (req, res) => {\n      try {\n        const validatedData = jobSchema.parse(req.body);\n        \n        // Check if company is approved\n        const company = await storage.getCompany(validatedData.companyId);\n        if (!company || company.status !== 'approved' || company.ownerUid !== req.user.uid) {\n          return res.status(403).json(createApiResponse(null, 'Company must be approved to post jobs'));\n        }\n        \n        const job = await storage.createJob({\n          ...validatedData,\n          posterUid: req.user.uid,\n          status: 'pending',\n        });\n\n        res.json(createApiResponse(job));\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          res.status(400).json(createApiResponse(null, 'Validation error', error.errors[0].message));\n        } else {\n          res.status(500).json(createApiResponse(null, 'Failed to create job'));\n        }\n      }\n    }\n  );\n\n  app.get('/api/jobs', async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = Math.min(parseInt(req.query.limit as string) || 20, 100);\n      const filters = {\n        department: req.query.department as string,\n        instituteType: req.query.instituteType as string,\n        level: req.query.level as string,\n        location: req.query.location as string,\n        employmentType: req.query.employmentType as string,\n        sortBy: req.query.sortBy as string || 'newest',\n        query: req.query.q as string,\n      };\n      \n      const result = await storage.searchJobs(filters, page, limit);\n      res.json(createApiResponse(result));\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Failed to search jobs'));\n    }\n  });\n\n  app.get('/api/jobs/featured', async (req, res) => {\n    try {\n      const limit = Math.min(parseInt(req.query.limit as string) || 6, 20);\n      const jobs = await storage.getFeaturedJobs(limit);\n      res.json(createApiResponse(jobs));\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Failed to get featured jobs'));\n    }\n  });\n\n  app.get('/api/jobs/:id', async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json(createApiResponse(null, 'Job not found'));\n      }\n      \n      // Increment view count\n      await storage.updateJob(job.id, { \n        viewCount: (job.viewCount || 0) + 1 \n      });\n      \n      res.json(createApiResponse(job));\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Failed to get job'));\n    }\n  });\n\n  // Admin routes for jobs\n  app.get('/api/admin/jobs/pending', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['admin']), \n    async (req, res) => {\n      try {\n        const jobs = await storage.getPendingJobs();\n        res.json(createApiResponse(jobs));\n      } catch (error) {\n        res.status(500).json(createApiResponse(null, 'Failed to get pending jobs'));\n      }\n    }\n  );\n\n  app.patch('/api/admin/jobs/:id/status', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['admin']), \n    async (req, res) => {\n      try {\n        const jobId = req.params.id;\n        const { status } = req.body;\n        \n        if (!['approved', 'rejected'].includes(status)) {\n          return res.status(400).json(createApiResponse(null, 'Invalid status'));\n        }\n        \n        const updateData: any = { status };\n        if (status === 'approved') {\n          updateData.approvedBy = req.user.uid;\n          updateData.approvedAt = new Date();\n        }\n        \n        await storage.updateJob(jobId, updateData);\n        \n        // Log audit entry\n        await storage.createAuditLog({\n          actorUid: req.user.uid,\n          action: status === 'approved' ? 'job_approved' : 'job_rejected',\n          targetType: 'job',\n          targetId: jobId,\n          metadata: { status },\n        });\n        \n        res.json(createApiResponse(null, null, `Job ${status} successfully`));\n      } catch (error) {\n        res.status(500).json(createApiResponse(null, `Failed to ${req.body.status} job`));\n      }\n    }\n  );\n\n  // Application routes\n  app.post('/api/applications', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['seeker']), \n    async (req, res) => {\n      try {\n        const validatedData = applicationSchema.parse(req.body);\n        \n        // Check if job is approved\n        const job = await storage.getJob(validatedData.jobId);\n        if (!job || job.status !== 'approved') {\n          return res.status(400).json(createApiResponse(null, 'Job not available for applications'));\n        }\n        \n        // Check if application deadline has passed\n        if (job.lastDate < new Date()) {\n          return res.status(400).json(createApiResponse(null, 'Application deadline has passed'));\n        }\n        \n        // Check for duplicate application\n        const dedupeKey = `${validatedData.jobId}_${req.user.uid}`;\n        const existingApplication = await storage.getApplicationByDedupeKey(dedupeKey);\n        if (existingApplication) {\n          return res.status(400).json(createApiResponse(null, 'You have already applied to this job'));\n        }\n        \n        const application = await storage.createApplication({\n          ...validatedData,\n          applicantUid: req.user.uid,\n          dedupeKey,\n        });\n        \n        // Increment application count\n        await storage.updateJob(job.id, { \n          applicationCount: (job.applicationCount || 0) + 1 \n        });\n        \n        res.json(createApiResponse(application));\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          res.status(400).json(createApiResponse(null, 'Validation error', error.errors[0].message));\n        } else {\n          res.status(500).json(createApiResponse(null, 'Failed to submit application'));\n        }\n      }\n    }\n  );\n\n  app.get('/api/applications/me', \n    authenticateUser, \n    requireEmailVerification, \n    requireRole(['seeker']), \n    async (req, res) => {\n      try {\n        const applications = await storage.getApplicationsByUser(req.user.uid);\n        res.json(createApiResponse(applications));\n      } catch (error) {\n        res.status(500).json(createApiResponse(null, 'Failed to get applications'));\n      }\n    }\n  );\n\n  // Stats route\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(createApiResponse(stats));\n    } catch (error) {\n      res.status(500).json(createApiResponse(null, 'Failed to get stats'));\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14917},"server/storage.ts":{"content":"import { \n  User, \n  Company, \n  Job, \n  Application, \n  Report, \n  AuditLog,\n  InsertUser, \n  InsertCompany, \n  InsertJob, \n  InsertApplication, \n  InsertReport, \n  InsertAuditLog,\n  JobSearchFilters,\n  PaginatedResponse,\n  UserRole,\n  CompanyStatus,\n  JobStatus,\n  ApplicationStatus\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Enhanced storage interface for faculty jobs marketplace\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<void>;\n  deleteUser(id: string): Promise<void>;\n\n  // Company operations\n  getCompany(id: string): Promise<Company | undefined>;\n  getCompanyByOwner(ownerUid: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, updates: Partial<Company>): Promise<void>;\n  getPendingCompanies(): Promise<Company[]>;\n  getApprovedCompanies(): Promise<Company[]>;\n\n  // Job operations\n  getJob(id: string): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: string, updates: Partial<Job>): Promise<void>;\n  deleteJob(id: string): Promise<void>;\n  getJobsByCompany(companyId: string): Promise<Job[]>;\n  getJobsByPoster(posterUid: string): Promise<Job[]>;\n  getPendingJobs(): Promise<Job[]>;\n  getApprovedJobs(): Promise<Job[]>;\n  getFeaturedJobs(limit?: number): Promise<Job[]>;\n  searchJobs(filters: Partial<JobSearchFilters>, page?: number, limit?: number): Promise<PaginatedResponse<Job>>;\n\n  // Application operations\n  getApplication(id: string): Promise<Application | undefined>;\n  getApplicationByDedupeKey(dedupeKey: string): Promise<Application | undefined>;\n  createApplication(application: InsertApplication): Promise<Application>;\n  updateApplication(id: string, updates: Partial<Application>): Promise<void>;\n  getApplicationsByUser(applicantUid: string): Promise<Application[]>;\n  getApplicationsByJob(jobId: string): Promise<Application[]>;\n\n  // Report operations\n  getReport(id: string): Promise<Report | undefined>;\n  createReport(report: InsertReport): Promise<Report>;\n  updateReport(id: string, updates: Partial<Report>): Promise<void>;\n  getPendingReports(): Promise<Report[]>;\n\n  // Audit log operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n\n  // Statistics\n  getStats(): Promise<{\n    totalJobs: number;\n    totalApplications: number;\n    totalEmployers: number;\n    totalSeekers: number;\n    pendingJobs: number;\n    pendingEmployers: number;\n    activeJobs: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private companies: Map<string, Company> = new Map();\n  private jobs: Map<string, Job> = new Map();\n  private applications: Map<string, Application> = new Map();\n  private reports: Map<string, Report> = new Map();\n  private auditLogs: Map<string, AuditLog> = new Map();\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<void> {\n    const user = this.users.get(id);\n    if (user) {\n      this.users.set(id, { ...user, ...updates, updatedAt: new Date() });\n    }\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n    // Also clean up related data\n    const userCompanies = Array.from(this.companies.values()).filter(c => c.ownerUid === id);\n    userCompanies.forEach(company => this.companies.delete(company.id));\n    \n    const userJobs = Array.from(this.jobs.values()).filter(j => j.posterUid === id);\n    userJobs.forEach(job => this.jobs.delete(job.id));\n    \n    const userApplications = Array.from(this.applications.values()).filter(a => a.applicantUid === id);\n    userApplications.forEach(app => this.applications.delete(app.id));\n  }\n\n  // Company operations\n  async getCompany(id: string): Promise<Company | undefined> {\n    return this.companies.get(id);\n  }\n\n  async getCompanyByOwner(ownerUid: string): Promise<Company | undefined> {\n    return Array.from(this.companies.values()).find(company => company.ownerUid === ownerUid);\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = randomUUID();\n    const company: Company = {\n      ...insertCompany,\n      id,\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.companies.set(id, company);\n    return company;\n  }\n\n  async updateCompany(id: string, updates: Partial<Company>): Promise<void> {\n    const company = this.companies.get(id);\n    if (company) {\n      this.companies.set(id, { ...company, ...updates, updatedAt: new Date() });\n    }\n  }\n\n  async getPendingCompanies(): Promise<Company[]> {\n    return Array.from(this.companies.values())\n      .filter(company => company.status === 'pending')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getApprovedCompanies(): Promise<Company[]> {\n    return Array.from(this.companies.values())\n      .filter(company => company.status === 'approved')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Job operations\n  async getJob(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const id = randomUUID();\n    const job: Job = {\n      ...insertJob,\n      id,\n      status: 'pending',\n      viewCount: 0,\n      applicationCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.jobs.set(id, job);\n    return job;\n  }\n\n  async updateJob(id: string, updates: Partial<Job>): Promise<void> {\n    const job = this.jobs.get(id);\n    if (job) {\n      this.jobs.set(id, { ...job, ...updates, updatedAt: new Date() });\n    }\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    this.jobs.delete(id);\n    // Clean up related applications\n    const jobApplications = Array.from(this.applications.values()).filter(a => a.jobId === id);\n    jobApplications.forEach(app => this.applications.delete(app.id));\n  }\n\n  async getJobsByCompany(companyId: string): Promise<Job[]> {\n    return Array.from(this.jobs.values())\n      .filter(job => job.companyId === companyId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getJobsByPoster(posterUid: string): Promise<Job[]> {\n    return Array.from(this.jobs.values())\n      .filter(job => job.posterUid === posterUid)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getPendingJobs(): Promise<Job[]> {\n    return Array.from(this.jobs.values())\n      .filter(job => job.status === 'pending')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getApprovedJobs(): Promise<Job[]> {\n    return Array.from(this.jobs.values())\n      .filter(job => job.status === 'approved')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getFeaturedJobs(limit: number = 6): Promise<Job[]> {\n    return Array.from(this.jobs.values())\n      .filter(job => job.status === 'approved')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async searchJobs(filters: Partial<JobSearchFilters>, page: number = 1, limit: number = 20): Promise<PaginatedResponse<Job>> {\n    let allJobs = Array.from(this.jobs.values()).filter(job => job.status === 'approved');\n\n    // Apply filters\n    if (filters.department) {\n      allJobs = allJobs.filter(job => job.department === filters.department);\n    }\n    if (filters.instituteType) {\n      allJobs = allJobs.filter(job => job.instituteType === filters.instituteType);\n    }\n    if (filters.level) {\n      allJobs = allJobs.filter(job => job.level === filters.level);\n    }\n    if (filters.location) {\n      allJobs = allJobs.filter(job => \n        job.location.city.toLowerCase().includes(filters.location!.toLowerCase()) ||\n        job.location.state.toLowerCase().includes(filters.location!.toLowerCase())\n      );\n    }\n    if (filters.employmentType) {\n      allJobs = allJobs.filter(job => job.employmentType === filters.employmentType);\n    }\n\n    // Text search\n    if (filters.query) {\n      const query = filters.query.toLowerCase();\n      allJobs = allJobs.filter(job =>\n        job.title.toLowerCase().includes(query) ||\n        job.description.toLowerCase().includes(query) ||\n        job.qualifications.some(q => q.toLowerCase().includes(query)) ||\n        job.skills.some(s => s.toLowerCase().includes(query))\n      );\n    }\n\n    // Date filtering\n    if (filters.postedWithin && filters.postedWithin !== 'all') {\n      const now = new Date();\n      let daysAgo = 0;\n      switch (filters.postedWithin) {\n        case '24h': daysAgo = 1; break;\n        case '7d': daysAgo = 7; break;\n        case '30d': daysAgo = 30; break;\n      }\n      const dateThreshold = new Date(now.getTime() - (daysAgo * 24 * 60 * 60 * 1000));\n      allJobs = allJobs.filter(job => job.createdAt >= dateThreshold);\n    }\n\n    // Sorting\n    switch (filters.sortBy) {\n      case 'deadline':\n        allJobs.sort((a, b) => a.lastDate.getTime() - b.lastDate.getTime());\n        break;\n      case 'salary_high':\n        allJobs.sort((a, b) => (b.maxSalary || 0) - (a.maxSalary || 0));\n        break;\n      case 'salary_low':\n        allJobs.sort((a, b) => (a.minSalary || 0) - (b.minSalary || 0));\n        break;\n      default: // 'newest'\n        allJobs.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n        break;\n    }\n\n    // Pagination\n    const total = allJobs.length;\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const items = allJobs.slice(startIndex, endIndex);\n    const hasMore = endIndex < total;\n\n    return {\n      items,\n      total,\n      page,\n      limit,\n      hasMore,\n    };\n  }\n\n  // Application operations\n  async getApplication(id: string): Promise<Application | undefined> {\n    return this.applications.get(id);\n  }\n\n  async getApplicationByDedupeKey(dedupeKey: string): Promise<Application | undefined> {\n    return Array.from(this.applications.values()).find(app => app.dedupeKey === dedupeKey);\n  }\n\n  async createApplication(insertApplication: InsertApplication): Promise<Application> {\n    const id = randomUUID();\n    const application: Application = {\n      ...insertApplication,\n      id,\n      status: 'submitted',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.applications.set(id, application);\n    return application;\n  }\n\n  async updateApplication(id: string, updates: Partial<Application>): Promise<void> {\n    const application = this.applications.get(id);\n    if (application) {\n      this.applications.set(id, { ...application, ...updates, updatedAt: new Date() });\n    }\n  }\n\n  async getApplicationsByUser(applicantUid: string): Promise<Application[]> {\n    return Array.from(this.applications.values())\n      .filter(application => application.applicantUid === applicantUid)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getApplicationsByJob(jobId: string): Promise<Application[]> {\n    return Array.from(this.applications.values())\n      .filter(application => application.jobId === jobId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Report operations\n  async getReport(id: string): Promise<Report | undefined> {\n    return this.reports.get(id);\n  }\n\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const id = randomUUID();\n    const report: Report = {\n      ...insertReport,\n      id,\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.reports.set(id, report);\n    return report;\n  }\n\n  async updateReport(id: string, updates: Partial<Report>): Promise<void> {\n    const report = this.reports.get(id);\n    if (report) {\n      this.reports.set(id, { ...report, ...updates, updatedAt: new Date() });\n    }\n  }\n\n  async getPendingReports(): Promise<Report[]> {\n    return Array.from(this.reports.values())\n      .filter(report => report.status === 'pending')\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Audit log operations\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...insertLog,\n      id,\n      timestamp: new Date(),\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getAuditLogs(limit: number = 50): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values())\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  // Statistics\n  async getStats(): Promise<{\n    totalJobs: number;\n    totalApplications: number;\n    totalEmployers: number;\n    totalSeekers: number;\n    pendingJobs: number;\n    pendingEmployers: number;\n    activeJobs: number;\n  }> {\n    const totalJobs = this.jobs.size;\n    const totalApplications = this.applications.size;\n    const totalEmployers = Array.from(this.users.values()).filter(u => u.role === 'employer').length;\n    const totalSeekers = Array.from(this.users.values()).filter(u => u.role === 'seeker').length;\n    const pendingJobs = Array.from(this.jobs.values()).filter(j => j.status === 'pending').length;\n    const pendingEmployers = Array.from(this.companies.values()).filter(c => c.status === 'pending').length;\n    const activeJobs = Array.from(this.jobs.values()).filter(j => j.status === 'approved').length;\n\n    return {\n      totalJobs,\n      totalApplications,\n      totalEmployers,\n      totalSeekers,\n      pendingJobs,\n      pendingEmployers,\n      activeJobs,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14334},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User roles\nexport const UserRole = z.enum([\"seeker\", \"employer\", \"admin\"]);\nexport type UserRole = z.infer<typeof UserRole>;\n\n// User schema\nexport const UserSchema = z.object({\n  id: z.string(),\n  displayName: z.string(),\n  email: z.string().email(),\n  role: UserRole.default(\"seeker\"),\n  emailVerified: z.boolean().default(false),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const InsertUserSchema = UserSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type User = z.infer<typeof UserSchema>;\nexport type InsertUser = z.infer<typeof InsertUserSchema>;\n\n// Company/Institution schema\nexport const CompanyStatus = z.enum([\"pending\", \"approved\", \"rejected\"]);\nexport type CompanyStatus = z.infer<typeof CompanyStatus>;\n\nexport const InstituteType = z.enum([\n  \"IIT\",\n  \"NIT\",\n  \"IIIT\",\n  \"IISc\",\n  \"Central University\",\n  \"State University\",\n  \"Deemed University\",\n  \"Private University\",\n  \"Community College\",\n  \"Research Institute\",\n  \"Other\"\n]);\nexport type InstituteType = z.infer<typeof InstituteType>;\n\nexport const CompanySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  website: z.string().url().optional(),\n  instituteType: InstituteType,\n  hrEmail: z.string().email(),\n  logoPath: z.string().optional(),\n  address: z.string(),\n  phone: z.string().optional(),\n  proofDocs: z.array(z.string()).default([]),\n  ownerUid: z.string(),\n  status: CompanyStatus.default(\"pending\"),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const InsertCompanySchema = CompanySchema.omit({\n  id: true,\n  status: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Company = z.infer<typeof CompanySchema>;\nexport type InsertCompany = z.infer<typeof InsertCompanySchema>;\n\n// Job schema\nexport const JobStatus = z.enum([\"pending\", \"approved\", \"rejected\", \"expired\"]);\nexport type JobStatus = z.infer<typeof JobStatus>;\n\nexport const JobLevel = z.enum([\n  \"Assistant Professor\",\n  \"Associate Professor\", \n  \"Professor\",\n  \"Lecturer\",\n  \"Senior Lecturer\",\n  \"Principal\",\n  \"Vice-Chancellor\",\n  \"Director\",\n  \"Visiting Professor\",\n  \"Adjunct Professor\",\n  \"Postdoc\",\n  \"Research Associate\",\n  \"Research Scientist\"\n]);\nexport type JobLevel = z.infer<typeof JobLevel>;\n\nexport const EmploymentType = z.enum([\n  \"Full-time\",\n  \"Part-time\",\n  \"Contract\",\n  \"Temporary\",\n  \"Visiting\"\n]);\nexport type EmploymentType = z.infer<typeof EmploymentType>;\n\nexport const Department = z.enum([\n  \"Mathematics\",\n  \"Statistics\", \n  \"Control Theory\",\n  \"Computer Science\",\n  \"Physics\",\n  \"Chemistry\",\n  \"Biology\",\n  \"Engineering\",\n  \"Economics\",\n  \"Management\",\n  \"Social Sciences\",\n  \"Humanities\",\n  \"Medicine\",\n  \"Law\",\n  \"Education\",\n  \"Other\"\n]);\nexport type Department = z.infer<typeof Department>;\n\nexport const JobSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  department: Department,\n  level: JobLevel,\n  instituteType: InstituteType,\n  employmentType: EmploymentType,\n  location: z.object({\n    city: z.string(),\n    state: z.string(),\n    country: z.string().default(\"India\"),\n  }),\n  minSalary: z.number().optional(),\n  maxSalary: z.number().optional(),\n  currency: z.string().default(\"INR\"),\n  qualifications: z.array(z.string()).default([]),\n  skills: z.array(z.string()).default([]),\n  responsibilities: z.array(z.string()).default([]),\n  description: z.string(),\n  requirements: z.string().optional(),\n  lastDate: z.date(),\n  applyMode: z.enum([\"external\", \"internal\"]).default(\"internal\"),\n  applyUrl: z.string().url().optional(),\n  companyId: z.string(),\n  posterUid: z.string(),\n  status: JobStatus.default(\"pending\"),\n  approvedBy: z.string().optional(),\n  approvedAt: z.date().optional(),\n  viewCount: z.number().default(0),\n  applicationCount: z.number().default(0),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const InsertJobSchema = JobSchema.omit({\n  id: true,\n  status: true,\n  approvedBy: true,\n  approvedAt: true,\n  viewCount: true,\n  applicationCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Job = z.infer<typeof JobSchema>;\nexport type InsertJob = z.infer<typeof InsertJobSchema>;\n\n// Application schema\nexport const ApplicationStatus = z.enum([\n  \"submitted\",\n  \"reviewed\", \n  \"shortlisted\",\n  \"rejected\",\n  \"offered\",\n  \"withdrawn\"\n]);\nexport type ApplicationStatus = z.infer<typeof ApplicationStatus>;\n\nexport const ApplicationSchema = z.object({\n  id: z.string(),\n  jobId: z.string(),\n  applicantUid: z.string(),\n  resumePath: z.string(),\n  coverLetter: z.string().optional(),\n  status: ApplicationStatus.default(\"submitted\"),\n  notes: z.string().optional(),\n  dedupeKey: z.string(), // jobId + applicantUid hash\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const InsertApplicationSchema = ApplicationSchema.omit({\n  id: true,\n  status: true,\n  notes: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Application = z.infer<typeof ApplicationSchema>;\nexport type InsertApplication = z.infer<typeof InsertApplicationSchema>;\n\n// Report schema (for abuse/moderation)\nexport const ReportType = z.enum([\"job\", \"company\", \"user\", \"application\"]);\nexport type ReportType = z.infer<typeof ReportType>;\n\nexport const ReportReason = z.enum([\n  \"spam\",\n  \"inappropriate_content\", \n  \"fake_information\",\n  \"harassment\",\n  \"duplicate\",\n  \"other\"\n]);\nexport type ReportReason = z.infer<typeof ReportReason>;\n\nexport const ReportSchema = z.object({\n  id: z.string(),\n  type: ReportType,\n  targetId: z.string(),\n  reporterUid: z.string(),\n  reason: ReportReason,\n  notes: z.string().optional(),\n  status: z.enum([\"pending\", \"resolved\", \"dismissed\"]).default(\"pending\"),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const InsertReportSchema = ReportSchema.omit({\n  id: true,\n  status: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Report = z.infer<typeof ReportSchema>;\nexport type InsertReport = z.infer<typeof InsertReportSchema>;\n\n// Audit Log schema\nexport const AuditActionType = z.enum([\n  \"user_created\",\n  \"user_role_changed\",\n  \"company_approved\",\n  \"company_rejected\", \n  \"job_approved\",\n  \"job_rejected\",\n  \"application_submitted\",\n  \"application_status_changed\",\n  \"report_created\",\n  \"report_resolved\"\n]);\nexport type AuditActionType = z.infer<typeof AuditActionType>;\n\nexport const AuditLogSchema = z.object({\n  id: z.string(),\n  actorUid: z.string(),\n  action: AuditActionType,\n  targetType: z.string(),\n  targetId: z.string(),\n  metadata: z.record(z.any()).optional(),\n  timestamp: z.date(),\n});\n\nexport const InsertAuditLogSchema = AuditLogSchema.omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type AuditLog = z.infer<typeof AuditLogSchema>;\nexport type InsertAuditLog = z.infer<typeof InsertAuditLogSchema>;\n\n// Search/Filter schemas\nexport const JobSearchFilters = z.object({\n  query: z.string().optional(),\n  department: Department.optional(),\n  instituteType: InstituteType.optional(),\n  level: JobLevel.optional(),\n  location: z.string().optional(),\n  employmentType: EmploymentType.optional(),\n  minSalary: z.number().optional(),\n  maxSalary: z.number().optional(),\n  postedWithin: z.enum([\"24h\", \"7d\", \"30d\", \"all\"]).default(\"all\"),\n  sortBy: z.enum([\"newest\", \"deadline\", \"salary_high\", \"salary_low\"]).default(\"newest\"),\n  page: z.number().default(1),\n  limit: z.number().default(20),\n});\n\nexport type JobSearchFilters = z.infer<typeof JobSearchFilters>;\n\n// API Response schemas\nexport const ApiResponse = <T extends z.ZodType>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    data: dataSchema.optional(),\n    error: z.string().optional(),\n    message: z.string().optional(),\n  });\n\nexport const PaginatedResponse = <T extends z.ZodType>(itemSchema: T) =>\n  z.object({\n    items: z.array(itemSchema),\n    total: z.number(),\n    page: z.number(), \n    limit: z.number(),\n    hasMore: z.boolean(),\n  });\n\nexport type ApiResponse<T> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n};\n\nexport type PaginatedResponse<T> = {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n};\n","size_bytes":8059},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/context/AuthProvider\";\nimport { Navigation } from \"@/components/Navigation\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import pages\nimport Home from \"@/pages/Home\";\nimport Jobs from \"@/pages/Jobs\";\nimport JobDetails from \"@/pages/JobDetails\";\nimport Auth from \"@/pages/Auth\";\nimport EmailVerification from \"@/pages/EmailVerification\";\nimport Profile from \"@/pages/Profile\";\nimport Employer from \"@/pages/Employer\";\nimport Admin from \"@/pages/Admin\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/jobs\" component={Jobs} />\n      <Route path=\"/jobs/:id\" component={JobDetails} />\n      \n      {/* Auth routes */}\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/verify\" component={EmailVerification} />\n      \n      {/* Protected routes */}\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/employer\" component={Employer} />\n      <Route path=\"/admin\" component={Admin} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <div className=\"min-h-screen bg-background\">\n            <Navigation />\n            <Router />\n          </div>\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1761},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"functions/src/index.ts":{"content":"import * as functions from 'firebase-functions';\nimport * as admin from 'firebase-admin';\nimport sgMail from '@sendgrid/mail';\nimport { z } from 'zod';\n\n// Initialize Firebase Admin\nadmin.initializeApp();\nconst db = admin.firestore();\nconst auth = admin.auth();\n\n// Initialize SendGrid\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\n// Region configuration (use India region for better performance)\nconst region = 'asia-south1';\n\n// Schema definitions for validation\nconst companySchema = z.object({\n  name: z.string().min(2),\n  website: z.string().url().optional(),\n  instituteType: z.string(),\n  hrEmail: z.string().email(),\n  phone: z.string().optional(),\n  address: z.string().min(10),\n  proofDocs: z.array(z.string()).default([]),\n});\n\nconst jobSchema = z.object({\n  title: z.string().min(5),\n  department: z.string(),\n  level: z.string(),\n  instituteType: z.string(),\n  employmentType: z.string(),\n  location: z.object({\n    city: z.string(),\n    state: z.string(),\n    country: z.string().default('India'),\n  }),\n  minSalary: z.number().optional(),\n  maxSalary: z.number().optional(),\n  currency: z.string().default('INR'),\n  qualifications: z.array(z.string()),\n  skills: z.array(z.string()),\n  responsibilities: z.array(z.string()),\n  description: z.string().min(50),\n  requirements: z.string().optional(),\n  lastDate: z.any().transform(val => admin.firestore.Timestamp.fromDate(new Date(val))),\n  companyId: z.string(),\n});\n\n// Helper function to send emails\nasync function sendEmail(to: string, subject: string, html: string): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn('SendGrid API key not configured');\n    return false;\n  }\n\n  try {\n    await sgMail.send({\n      to,\n      from: process.env.FROM_EMAIL || 'noreply@eduhire.faculty.com',\n      subject,\n      html,\n    });\n    return true;\n  } catch (error) {\n    console.error('Email sending error:', error);\n    return false;\n  }\n}\n\n// Helper function to create audit log\nasync function createAuditLog(\n  actorUid: string,\n  action: string,\n  targetType: string,\n  targetId: string,\n  metadata?: any\n): Promise<void> {\n  await db.collection('auditLogs').add({\n    actorUid,\n    action,\n    targetType,\n    targetId,\n    metadata: metadata || {},\n    timestamp: admin.firestore.FieldValue.serverTimestamp(),\n  });\n}\n\n// 1. User creation trigger - Create user profile on authentication\nexport const onAuthUserCreate = functions\n  .region(region)\n  .auth.user()\n  .onCreate(async (user) => {\n    try {\n      const userProfile = {\n        displayName: user.displayName || 'Anonymous User',\n        email: user.email!,\n        role: 'seeker', // Default role\n        emailVerified: user.emailVerified,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      };\n\n      await db.collection('users').doc(user.uid).set(userProfile);\n\n      // Send welcome email\n      if (user.email) {\n        await sendEmail(\n          user.email,\n          'Welcome to EduHire Faculty!',\n          `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #2563eb;\">Welcome to EduHire Faculty!</h1>\n            <p>Thank you for joining our academic job marketplace. We're excited to help you find the perfect faculty position.</p>\n            <p>To get started, please verify your email address using the verification link sent by Firebase Authentication.</p>\n            <p>Best regards,<br>The EduHire Faculty Team</p>\n          </div>\n          `\n        );\n      }\n\n      console.log(`User profile created for ${user.uid}`);\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n    }\n  });\n\n// 2. Request employer upgrade (callable function)\nexport const requestEmployerUpgrade = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify authentication and email verification\n    if (!context.auth || !context.auth.token.email_verified) {\n      throw new functions.https.HttpsError(\n        'unauthenticated',\n        'User must be authenticated and email verified'\n      );\n    }\n\n    try {\n      const validatedData = companySchema.parse(data);\n      const uid = context.auth.uid;\n\n      // Check if user already has a company\n      const existingCompany = await db.collection('companies')\n        .where('ownerUid', '==', uid)\n        .limit(1)\n        .get();\n\n      if (!existingCompany.empty) {\n        throw new functions.https.HttpsError(\n          'already-exists',\n          'User already has a company profile'\n        );\n      }\n\n      // Create company with pending status\n      const companyData = {\n        ...validatedData,\n        ownerUid: uid,\n        status: 'pending',\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      };\n\n      const companyRef = await db.collection('companies').add(companyData);\n\n      // Create audit log\n      await createAuditLog(uid, 'company_created', 'company', companyRef.id);\n\n      return { success: true, companyId: companyRef.id };\n    } catch (error) {\n      console.error('Error requesting employer upgrade:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to create company profile');\n    }\n  });\n\n// 3. Approve employer upgrade (admin only callable function)\nexport const approveEmployerUpgrade = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify admin authentication\n    if (!context.auth || context.auth.token.role !== 'admin') {\n      throw new functions.https.HttpsError(\n        'permission-denied',\n        'Only admin users can approve employers'\n      );\n    }\n\n    const { uid, companyId } = data;\n\n    if (!uid || !companyId) {\n      throw new functions.https.HttpsError(\n        'invalid-argument',\n        'uid and companyId are required'\n      );\n    }\n\n    try {\n      // Update company status\n      await db.collection('companies').doc(companyId).update({\n        status: 'approved',\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n\n      // Set custom user claim\n      await auth.setCustomUserClaims(uid, { role: 'employer' });\n\n      // Update user profile\n      await db.collection('users').doc(uid).update({\n        role: 'employer',\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n\n      // Get company and user details for email\n      const [companyDoc, userDoc] = await Promise.all([\n        db.collection('companies').doc(companyId).get(),\n        db.collection('users').doc(uid).get(),\n      ]);\n\n      const companyData = companyDoc.data();\n      const userData = userDoc.data();\n\n      // Send approval email\n      if (userData?.email) {\n        await sendEmail(\n          userData.email,\n          'Your Employer Account Has Been Approved!',\n          `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #16a34a;\">Congratulations!</h1>\n            <p>Your employer account for <strong>${companyData?.name}</strong> has been approved.</p>\n            <p>You can now start posting faculty positions and attracting qualified candidates.</p>\n            <p><a href=\"${process.env.APP_URL || 'https://eduhire.faculty.com'}/employer\" \n               style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n               Go to Dashboard</a></p>\n            <p>Best regards,<br>The EduHire Faculty Team</p>\n          </div>\n          `\n        );\n      }\n\n      // Create audit log\n      await createAuditLog(context.auth.uid, 'company_approved', 'company', companyId, { uid });\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error approving employer:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to approve employer');\n    }\n  });\n\n// 4. Create job (employer only callable function)\nexport const createJob = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify employer authentication and email verification\n    if (!context.auth || !context.auth.token.email_verified || context.auth.token.role !== 'employer') {\n      throw new functions.https.HttpsError(\n        'permission-denied',\n        'Only verified employers can create jobs'\n      );\n    }\n\n    try {\n      const validatedData = jobSchema.parse(data);\n      const uid = context.auth.uid;\n\n      // Verify company ownership and approval\n      const companyDoc = await db.collection('companies').doc(validatedData.companyId).get();\n      if (!companyDoc.exists) {\n        throw new functions.https.HttpsError('not-found', 'Company not found');\n      }\n\n      const companyData = companyDoc.data()!;\n      if (companyData.ownerUid !== uid) {\n        throw new functions.https.HttpsError('permission-denied', 'Not authorized to post for this company');\n      }\n\n      if (companyData.status !== 'approved') {\n        throw new functions.https.HttpsError('permission-denied', 'Company must be approved to post jobs');\n      }\n\n      // Create job with pending status\n      const jobData = {\n        ...validatedData,\n        posterUid: uid,\n        status: 'pending',\n        viewCount: 0,\n        applicationCount: 0,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      };\n\n      const jobRef = await db.collection('jobs').add(jobData);\n\n      // Create audit log\n      await createAuditLog(uid, 'job_created', 'job', jobRef.id);\n\n      return { success: true, jobId: jobRef.id };\n    } catch (error) {\n      console.error('Error creating job:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to create job');\n    }\n  });\n\n// 5. Approve job (admin only callable function)\nexport const approveJob = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify admin authentication\n    if (!context.auth || context.auth.token.role !== 'admin') {\n      throw new functions.https.HttpsError(\n        'permission-denied',\n        'Only admin users can approve jobs'\n      );\n    }\n\n    const { jobId } = data;\n\n    if (!jobId) {\n      throw new functions.https.HttpsError(\n        'invalid-argument',\n        'jobId is required'\n      );\n    }\n\n    try {\n      // Update job status\n      await db.collection('jobs').doc(jobId).update({\n        status: 'approved',\n        approvedBy: context.auth.uid,\n        approvedAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n\n      // Get job and company details for email\n      const jobDoc = await db.collection('jobs').doc(jobId).get();\n      const jobData = jobDoc.data()!;\n\n      const companyDoc = await db.collection('companies').doc(jobData.companyId).get();\n      const companyData = companyDoc.data()!;\n\n      const userDoc = await db.collection('users').doc(jobData.posterUid).get();\n      const userData = userDoc.data()!;\n\n      // Send approval email\n      if (userData?.email) {\n        await sendEmail(\n          userData.email,\n          'Your Job Posting Has Been Approved!',\n          `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #16a34a;\">Job Approved!</h1>\n            <p>Your job posting \"<strong>${jobData.title}</strong>\" has been approved and is now live on our platform.</p>\n            <p>Qualified candidates can now view and apply for this position.</p>\n            <p><a href=\"${process.env.APP_URL || 'https://eduhire.faculty.com'}/employer/jobs\" \n               style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n               View Applications</a></p>\n            <p>Best regards,<br>The EduHire Faculty Team</p>\n          </div>\n          `\n        );\n      }\n\n      // Create audit log\n      await createAuditLog(context.auth.uid, 'job_approved', 'job', jobId);\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error approving job:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to approve job');\n    }\n  });\n\n// 6. Apply to job (seeker only callable function)\nexport const applyToJob = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify seeker authentication and email verification\n    if (!context.auth || !context.auth.token.email_verified || context.auth.token.role !== 'seeker') {\n      throw new functions.https.HttpsError(\n        'permission-denied',\n        'Only verified job seekers can apply to jobs'\n      );\n    }\n\n    const { jobId, resumePath, coverLetter } = data;\n    const uid = context.auth.uid;\n\n    if (!jobId || !resumePath) {\n      throw new functions.https.HttpsError(\n        'invalid-argument',\n        'jobId and resumePath are required'\n      );\n    }\n\n    try {\n      // Verify job exists and is approved\n      const jobDoc = await db.collection('jobs').doc(jobId).get();\n      if (!jobDoc.exists) {\n        throw new functions.https.HttpsError('not-found', 'Job not found');\n      }\n\n      const jobData = jobDoc.data()!;\n      if (jobData.status !== 'approved') {\n        throw new functions.https.HttpsError('permission-denied', 'Job is not available for applications');\n      }\n\n      // Check if application deadline has passed\n      const lastDate = jobData.lastDate.toDate();\n      if (lastDate < new Date()) {\n        throw new functions.https.HttpsError('permission-denied', 'Application deadline has passed');\n      }\n\n      // Check for duplicate application\n      const dedupeKey = `${jobId}_${uid}`;\n      const existingApplication = await db.collection('applications')\n        .where('dedupeKey', '==', dedupeKey)\n        .limit(1)\n        .get();\n\n      if (!existingApplication.empty) {\n        throw new functions.https.HttpsError('already-exists', 'You have already applied to this job');\n      }\n\n      // Create application\n      const applicationData = {\n        jobId,\n        applicantUid: uid,\n        resumePath,\n        coverLetter: coverLetter || '',\n        status: 'submitted',\n        dedupeKey,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      };\n\n      const applicationRef = await db.collection('applications').add(applicationData);\n\n      // Update job application count\n      await db.collection('jobs').doc(jobId).update({\n        applicationCount: admin.firestore.FieldValue.increment(1),\n      });\n\n      // Get applicant and company details for notification\n      const [applicantDoc, companyDoc] = await Promise.all([\n        db.collection('users').doc(uid).get(),\n        db.collection('companies').doc(jobData.companyId).get(),\n      ]);\n\n      const applicantData = applicantDoc.data()!;\n      const companyData = companyDoc.data()!;\n\n      // Send application notification to employer\n      await sendEmail(\n        companyData.hrEmail,\n        'New Application Received',\n        `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h1 style=\"color: #2563eb;\">New Application Received</h1>\n          <p>You have received a new application for the position \"<strong>${jobData.title}</strong>\" from ${applicantData.displayName}.</p>\n          <p><a href=\"${process.env.APP_URL || 'https://eduhire.faculty.com'}/employer/jobs\" \n             style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n             Review Application</a></p>\n          <p>Best regards,<br>The EduHire Faculty Team</p>\n        </div>\n        `\n      );\n\n      // Create audit log\n      await createAuditLog(uid, 'application_submitted', 'application', applicationRef.id, { jobId });\n\n      return { success: true, applicationId: applicationRef.id };\n    } catch (error) {\n      console.error('Error applying to job:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to submit application');\n    }\n  });\n\n// 7. Generate signed URL for resume access (employer/admin only)\nexport const signUrlForResume = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify authentication\n    if (!context.auth || !context.auth.token.email_verified) {\n      throw new functions.https.HttpsError(\n        'unauthenticated',\n        'User must be authenticated and email verified'\n      );\n    }\n\n    const { applicationId } = data;\n    const uid = context.auth.uid;\n    const role = context.auth.token.role;\n\n    if (!applicationId) {\n      throw new functions.https.HttpsError(\n        'invalid-argument',\n        'applicationId is required'\n      );\n    }\n\n    try {\n      // Get application details\n      const applicationDoc = await db.collection('applications').doc(applicationId).get();\n      if (!applicationDoc.exists) {\n        throw new functions.https.HttpsError('not-found', 'Application not found');\n      }\n\n      const applicationData = applicationDoc.data()!;\n\n      // Check permissions\n      if (role === 'admin') {\n        // Admin can access any resume\n      } else if (role === 'employer') {\n        // Employer can only access resumes for their job postings\n        const jobDoc = await db.collection('jobs').doc(applicationData.jobId).get();\n        if (!jobDoc.exists || jobDoc.data()!.posterUid !== uid) {\n          throw new functions.https.HttpsError(\n            'permission-denied',\n            'Not authorized to access this resume'\n          );\n        }\n      } else {\n        throw new functions.https.HttpsError(\n          'permission-denied',\n          'Only employers and admin can access resumes'\n        );\n      }\n\n      // Generate signed URL (expires in 1 hour)\n      const bucket = admin.storage().bucket();\n      const file = bucket.file(applicationData.resumePath);\n\n      const [url] = await file.getSignedUrl({\n        action: 'read',\n        expires: Date.now() + 3600 * 1000, // 1 hour\n      });\n\n      return { success: true, url };\n    } catch (error) {\n      console.error('Error generating signed URL:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to generate signed URL');\n    }\n  });\n\n// 8. Scheduled function to expire jobs\nexport const expireJobs = functions\n  .region(region)\n  .pubsub\n  .schedule('every 24 hours')\n  .onRun(async () => {\n    try {\n      const now = admin.firestore.Timestamp.now();\n      \n      // Find jobs past their deadline\n      const expiredJobsQuery = await db.collection('jobs')\n        .where('status', '==', 'approved')\n        .where('lastDate', '<', now)\n        .get();\n\n      const batch = db.batch();\n      let count = 0;\n\n      expiredJobsQuery.docs.forEach((doc) => {\n        batch.update(doc.ref, {\n          status: 'expired',\n          updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n        });\n        count++;\n      });\n\n      if (count > 0) {\n        await batch.commit();\n        console.log(`Expired ${count} jobs`);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error expiring jobs:', error);\n      return null;\n    }\n  });\n\n// 9. Update application status (employer/admin only)\nexport const updateApplicationStatus = functions\n  .region(region)\n  .https\n  .onCall(async (data, context) => {\n    // Verify authentication\n    if (!context.auth || !context.auth.token.email_verified) {\n      throw new functions.https.HttpsError(\n        'unauthenticated',\n        'User must be authenticated and email verified'\n      );\n    }\n\n    const { applicationId, status, notes } = data;\n    const uid = context.auth.uid;\n    const role = context.auth.token.role;\n\n    const validStatuses = ['reviewed', 'shortlisted', 'rejected', 'offered'];\n    if (!applicationId || !status || !validStatuses.includes(status)) {\n      throw new functions.https.HttpsError(\n        'invalid-argument',\n        'applicationId and valid status are required'\n      );\n    }\n\n    try {\n      // Get application details\n      const applicationDoc = await db.collection('applications').doc(applicationId).get();\n      if (!applicationDoc.exists) {\n        throw new functions.https.HttpsError('not-found', 'Application not found');\n      }\n\n      const applicationData = applicationDoc.data()!;\n\n      // Check permissions\n      if (role === 'admin') {\n        // Admin can update any application\n      } else if (role === 'employer') {\n        // Employer can only update applications for their jobs\n        const jobDoc = await db.collection('jobs').doc(applicationData.jobId).get();\n        if (!jobDoc.exists || jobDoc.data()!.posterUid !== uid) {\n          throw new functions.https.HttpsError(\n            'permission-denied',\n            'Not authorized to update this application'\n          );\n        }\n      } else {\n        throw new functions.https.HttpsError(\n          'permission-denied',\n          'Only employers and admin can update applications'\n        );\n      }\n\n      // Update application\n      await db.collection('applications').doc(applicationId).update({\n        status,\n        notes: notes || '',\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n\n      // Get job and applicant details for notification\n      const [jobDoc, applicantDoc] = await Promise.all([\n        db.collection('jobs').doc(applicationData.jobId).get(),\n        db.collection('users').doc(applicationData.applicantUid).get(),\n      ]);\n\n      const jobData = jobDoc.data()!;\n      const applicantData = applicantDoc.data()!;\n\n      // Send status update email to applicant\n      if (applicantData?.email) {\n        await sendEmail(\n          applicantData.email,\n          'Application Status Update',\n          `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #2563eb;\">Application Status Update</h1>\n            <p>The status of your application for \"<strong>${jobData.title}</strong>\" has been updated to: <strong>${status}</strong>.</p>\n            ${notes ? `<p>Additional notes: ${notes}</p>` : ''}\n            <p><a href=\"${process.env.APP_URL || 'https://eduhire.faculty.com'}/profile\" \n               style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n               View Application</a></p>\n            <p>Best regards,<br>The EduHire Faculty Team</p>\n          </div>\n          `\n        );\n      }\n\n      // Create audit log\n      await createAuditLog(uid, 'application_status_changed', 'application', applicationId, { status, previousStatus: applicationData.status });\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating application status:', error);\n      throw new functions.https.HttpsError('internal', 'Failed to update application status');\n    }\n  });\n","size_bytes":23073},"server/services/email.ts":{"content":"import sgMail from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set. Email functionality will be disabled.\");\n} else {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\nexport interface EmailParams {\n  to: string;\n  from?: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  templateId?: string;\n  dynamicTemplateData?: Record<string, any>;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.error('SendGrid API key not configured');\n      return false;\n    }\n\n    const emailData = {\n      to: params.to,\n      from: params.from || process.env.FROM_EMAIL || 'noreply@eduhire.faculty.com',\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n      ...(params.templateId && {\n        templateId: params.templateId,\n        dynamicTemplateData: params.dynamicTemplateData,\n      }),\n    };\n\n    await sgMail.send(emailData);\n    console.log(`Email sent successfully to ${params.to}`);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\n// Email templates\nexport const EmailTemplates = {\n  WELCOME: {\n    subject: 'Welcome to EduHire Faculty!',\n    getHtml: (name: string) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h1 style=\"color: #2563eb;\">Welcome to EduHire Faculty, ${name}!</h1>\n        <p>Thank you for joining our academic job marketplace. We're excited to help you find the perfect faculty position.</p>\n        <p>To get started, please verify your email address by clicking the verification link sent by Firebase Auth.</p>\n        <p>Best regards,<br>The EduHire Faculty Team</p>\n      </div>\n    `\n  },\n  \n  EMPLOYER_APPROVED: {\n    subject: 'Your Employer Account Has Been Approved!',\n    getHtml: (companyName: string) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h1 style=\"color: #16a34a;\">Congratulations!</h1>\n        <p>Your employer account for <strong>${companyName}</strong> has been approved.</p>\n        <p>You can now start posting faculty positions and attracting qualified candidates.</p>\n        <p><a href=\"${process.env.APP_URL}/employer\" style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Go to Dashboard</a></p>\n        <p>Best regards,<br>The EduHire Faculty Team</p>\n      </div>\n    `\n  },\n  \n  JOB_APPROVED: {\n    subject: 'Your Job Posting Has Been Approved!',\n    getHtml: (jobTitle: string) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h1 style=\"color: #16a34a;\">Job Approved!</h1>\n        <p>Your job posting \"<strong>${jobTitle}</strong>\" has been approved and is now live on our platform.</p>\n        <p>Qualified candidates can now view and apply for this position.</p>\n        <p><a href=\"${process.env.APP_URL}/employer/jobs\" style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">View Applications</a></p>\n        <p>Best regards,<br>The EduHire Faculty Team</p>\n      </div>\n    `\n  },\n  \n  APPLICATION_RECEIVED: {\n    subject: 'New Application Received',\n    getHtml: (jobTitle: string, applicantName: string) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h1 style=\"color: #2563eb;\">New Application Received</h1>\n        <p>You have received a new application for the position \"<strong>${jobTitle}</strong>\" from ${applicantName}.</p>\n        <p><a href=\"${process.env.APP_URL}/employer/jobs\" style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Review Application</a></p>\n        <p>Best regards,<br>The EduHire Faculty Team</p>\n      </div>\n    `\n  },\n  \n  APPLICATION_STATUS_CHANGED: {\n    subject: 'Application Status Update',\n    getHtml: (jobTitle: string, status: string) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h1 style=\"color: #2563eb;\">Application Status Update</h1>\n        <p>The status of your application for \"<strong>${jobTitle}</strong>\" has been updated to: <strong>${status}</strong>.</p>\n        <p><a href=\"${process.env.APP_URL}/profile\" style=\"background-color: #2563eb; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">View Application</a></p>\n        <p>Best regards,<br>The EduHire Faculty Team</p>\n      </div>\n    `\n  }\n};\n\n// Helper functions for sending specific emails\nexport async function sendWelcomeEmail(to: string, name: string): Promise<boolean> {\n  return sendEmail({\n    to,\n    subject: EmailTemplates.WELCOME.subject,\n    html: EmailTemplates.WELCOME.getHtml(name),\n  });\n}\n\nexport async function sendEmployerApprovedEmail(to: string, companyName: string): Promise<boolean> {\n  return sendEmail({\n    to,\n    subject: EmailTemplates.EMPLOYER_APPROVED.subject,\n    html: EmailTemplates.EMPLOYER_APPROVED.getHtml(companyName),\n  });\n}\n\nexport async function sendJobApprovedEmail(to: string, jobTitle: string): Promise<boolean> {\n  return sendEmail({\n    to,\n    subject: EmailTemplates.JOB_APPROVED.subject,\n    html: EmailTemplates.JOB_APPROVED.getHtml(jobTitle),\n  });\n}\n\nexport async function sendApplicationReceivedEmail(to: string, jobTitle: string, applicantName: string): Promise<boolean> {\n  return sendEmail({\n    to,\n    subject: EmailTemplates.APPLICATION_RECEIVED.subject,\n    html: EmailTemplates.APPLICATION_RECEIVED.getHtml(jobTitle, applicantName),\n  });\n}\n\nexport async function sendApplicationStatusEmail(to: string, jobTitle: string, status: string): Promise<boolean> {\n  return sendEmail({\n    to,\n    subject: EmailTemplates.APPLICATION_STATUS_CHANGED.subject,\n    html: EmailTemplates.APPLICATION_STATUS_CHANGED.getHtml(jobTitle, status),\n  });\n}\n","size_bytes":6000},"server/services/firebase-admin.ts":{"content":"import { initializeApp, getApps, cert } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\n\n// Initialize Firebase Admin SDK\nlet app;\nif (getApps().length === 0) {\n  // In production, use service account key\n  if (process.env.FIREBASE_SERVICE_ACCOUNT_KEY) {\n    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);\n    app = initializeApp({\n      credential: cert(serviceAccount),\n      projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n      storageBucket: `${process.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n    });\n  } else {\n    // For development with Firebase Emulator\n    app = initializeApp({\n      projectId: process.env.VITE_FIREBASE_PROJECT_ID || 'demo-project',\n    });\n  }\n} else {\n  app = getApps()[0];\n}\n\nexport const adminAuth = getAuth(app);\nexport const adminDb = getFirestore(app);\nexport const adminStorage = getStorage(app);\n\n// Validate Firebase ID token\nexport async function validateFirebaseToken(idToken: string) {\n  try {\n    const decodedToken = await adminAuth.verifyIdToken(idToken);\n    return decodedToken;\n  } catch (error) {\n    console.error('Error verifying Firebase token:', error);\n    throw new Error('Invalid token');\n  }\n}\n\n// Set custom user claims (roles)\nexport async function setUserRole(uid: string, role: 'seeker' | 'employer' | 'admin') {\n  try {\n    await adminAuth.setCustomUserClaims(uid, { role });\n  } catch (error) {\n    console.error('Error setting user role:', error);\n    throw new Error('Failed to set user role');\n  }\n}\n\n// Create user profile in Firestore\nexport async function createUserProfile(uid: string, data: {\n  displayName: string;\n  email: string;\n  role: 'seeker' | 'employer' | 'admin';\n  emailVerified: boolean;\n}) {\n  try {\n    const userRef = adminDb.collection('users').doc(uid);\n    await userRef.set({\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Error creating user profile:', error);\n    throw new Error('Failed to create user profile');\n  }\n}\n\n// Update user profile\nexport async function updateUserProfile(uid: string, data: any) {\n  try {\n    const userRef = adminDb.collection('users').doc(uid);\n    await userRef.update({\n      ...data,\n      updatedAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    throw new Error('Failed to update user profile');\n  }\n}\n\n// Get user profile\nexport async function getUserProfile(uid: string) {\n  try {\n    const userRef = adminDb.collection('users').doc(uid);\n    const doc = await userRef.get();\n    \n    if (!doc.exists) {\n      return null;\n    }\n    \n    return {\n      id: uid,\n      ...doc.data(),\n    };\n  } catch (error) {\n    console.error('Error getting user profile:', error);\n    throw new Error('Failed to get user profile');\n  }\n}\n\n// Delete user and all associated data\nexport async function deleteUser(uid: string) {\n  try {\n    const batch = adminDb.batch();\n    \n    // Delete user profile\n    const userRef = adminDb.collection('users').doc(uid);\n    batch.delete(userRef);\n    \n    // Delete user's applications\n    const applicationsSnapshot = await adminDb\n      .collection('applications')\n      .where('applicantUid', '==', uid)\n      .get();\n      \n    applicationsSnapshot.docs.forEach(doc => {\n      batch.delete(doc.ref);\n    });\n    \n    // Delete user's companies (if employer)\n    const companiesSnapshot = await adminDb\n      .collection('companies')\n      .where('ownerUid', '==', uid)\n      .get();\n      \n    companiesSnapshot.docs.forEach(doc => {\n      batch.delete(doc.ref);\n    });\n    \n    // Delete user's jobs\n    const jobsSnapshot = await adminDb\n      .collection('jobs')\n      .where('posterUid', '==', uid)\n      .get();\n      \n    jobsSnapshot.docs.forEach(doc => {\n      batch.delete(doc.ref);\n    });\n    \n    await batch.commit();\n    \n    // Delete from Auth\n    await adminAuth.deleteUser(uid);\n    \n  } catch (error) {\n    console.error('Error deleting user:', error);\n    throw new Error('Failed to delete user');\n  }\n}\n\n// Generate signed URL for file access\nexport async function generateSignedUrl(filePath: string, expiresIn: number = 3600) {\n  try {\n    const bucket = adminStorage.bucket();\n    const file = bucket.file(filePath);\n    \n    const [url] = await file.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + expiresIn * 1000,\n    });\n    \n    return url;\n  } catch (error) {\n    console.error('Error generating signed URL:', error);\n    throw new Error('Failed to generate signed URL');\n  }\n}\n","size_bytes":4691},"client/src/components/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  text?: string;\n}\n\nexport function LoadingSpinner({ size = 'md', className, text }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-6 h-6',\n    lg: 'w-8 h-8',\n  };\n\n  return (\n    <div className={cn(\"flex items-center justify-center\", className)} data-testid=\"loading-spinner\">\n      <Loader2 className={cn(\"animate-spin text-muted-foreground\", sizeClasses[size])} />\n      {text && <span className=\"ml-2 text-sm text-muted-foreground\">{text}</span>}\n    </div>\n  );\n}\n\nexport function PageLoadingSpinner({ text = \"Loading...\" }: { text?: string }) {\n  return (\n    <div className=\"min-h-[50vh] flex flex-col items-center justify-center\">\n      <LoadingSpinner size=\"lg\" />\n      <p className=\"mt-4 text-muted-foreground\">{text}</p>\n    </div>\n  );\n}\n\nexport default LoadingSpinner;\n","size_bytes":998},"client/src/components/Navigation.tsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/context/AuthProvider';\nimport { logout } from '@/lib/auth';\nimport { Button } from './ui/button';\nimport { Avatar, AvatarFallback } from './ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './ui/dropdown-menu';\nimport {\n  GraduationCap,\n  Bell,\n  User,\n  Settings,\n  LogOut,\n  Briefcase,\n  Home,\n  Shield,\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { RoleGate } from './RoleGate';\n\ninterface NavigationProps {\n  className?: string;\n}\n\nexport function Navigation({ className }: NavigationProps) {\n  const { user, userProfile } = useAuth();\n  const [location] = useLocation();\n\n  const navItems = [\n    {\n      label: 'Home',\n      href: '/',\n      icon: Home,\n      public: true,\n    },\n    {\n      label: 'Browse Jobs',\n      href: '/jobs',\n      icon: Briefcase,\n      public: true,\n    },\n    {\n      label: 'Profile',\n      href: '/profile',\n      icon: User,\n      roles: ['seeker'],\n    },\n    {\n      label: 'Employer',\n      href: '/employer',\n      icon: Briefcase,\n      roles: ['employer'],\n    },\n    {\n      label: 'Admin',\n      href: '/admin',\n      icon: Shield,\n      roles: ['admin'],\n    },\n  ];\n\n  const handleSignOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <nav className={cn(\"bg-card border-b border-border sticky top-0 z-50\", className)}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <GraduationCap className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-bold text-foreground\">EduHire Faculty</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              // Show public items or items for specific roles\n              if (item.public || (item.roles && userProfile && item.roles.includes(userProfile.role))) {\n                return (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className={cn(\n                      \"px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                      \"hover:text-foreground hover:bg-secondary\",\n                      isActive\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-muted-foreground\"\n                    )}\n                    data-testid={`nav-link-${item.label.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Icon className=\"w-4 h-4 inline mr-2\" />\n                    {item.label}\n                  </Link>\n                );\n              }\n              return null;\n            })}\n          </div>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <>\n                {/* Notifications */}\n                <div className=\"relative\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"p-2\"\n                    data-testid=\"button-notifications\"\n                  >\n                    <Bell className=\"w-5 h-5\" />\n                  </Button>\n                  <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-accent rounded-full\"></span>\n                </div>\n\n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full p-0\" data-testid=\"button-user-menu\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                          {userProfile?.displayName ? getInitials(userProfile.displayName) : 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <p className=\"font-medium text-sm\">{userProfile?.displayName}</p>\n                        <p className=\"w-[200px] truncate text-xs text-muted-foreground\">\n                          {user.email}\n                        </p>\n                        {userProfile?.role && (\n                          <p className=\"text-xs text-muted-foreground capitalize\">\n                            {userProfile.role}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    \n                    <RoleGate allowedRoles={['seeker']}>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/profile\" data-testid=\"menu-item-profile\">\n                          <User className=\"mr-2 h-4 w-4\" />\n                          Profile\n                        </Link>\n                      </DropdownMenuItem>\n                    </RoleGate>\n                    \n                    <RoleGate allowedRoles={['employer']}>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/employer\" data-testid=\"menu-item-employer\">\n                          <Briefcase className=\"mr-2 h-4 w-4\" />\n                          Employer Dashboard\n                        </Link>\n                      </DropdownMenuItem>\n                    </RoleGate>\n                    \n                    <RoleGate allowedRoles={['admin']}>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/admin\" data-testid=\"menu-item-admin\">\n                          <Shield className=\"mr-2 h-4 w-4\" />\n                          Admin Panel\n                        </Link>\n                      </DropdownMenuItem>\n                    </RoleGate>\n                    \n                    <DropdownMenuItem data-testid=\"menu-item-settings\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Settings\n                    </DropdownMenuItem>\n                    \n                    <DropdownMenuSeparator />\n                    \n                    <DropdownMenuItem onClick={handleSignOut} data-testid=\"menu-item-logout\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Link href=\"/auth\">\n                <Button data-testid=\"button-sign-in\">\n                  Sign In\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7654},"client/src/components/ProtectedRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/context/AuthProvider';\nimport { UserRole } from '@shared/schema';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { AlertTriangle, Mail, ShieldOff } from 'lucide-react';\nimport { sendVerificationEmail } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: UserRole;\n  requireEmailVerification?: boolean;\n  fallbackPath?: string;\n}\n\nexport function ProtectedRoute({\n  children,\n  requiredRole,\n  requireEmailVerification = true,\n  fallbackPath = '/auth',\n}: ProtectedRouteProps) {\n  const { user, userProfile, loading } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Show loading while checking auth state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  // Redirect to auth if not signed in\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation(fallbackPath);\n    }\n  }, [loading, user, fallbackPath, setLocation]);\n\n  if (!user) {\n    return null; // Return null while redirecting\n  }\n\n  // Show email verification required\n  if (requireEmailVerification && !user.emailVerified) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n            <CardTitle className=\"text-xl\">Email Verification Required</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Please verify your email address to access this feature. We've sent a verification link to:\n            </p>\n            <p className=\"font-medium text-foreground bg-muted px-3 py-2 rounded\">\n              {user.email}\n            </p>\n            <div className=\"space-y-2\">\n              <Button\n                onClick={() => sendVerificationEmail(user)}\n                variant=\"default\"\n                className=\"w-full\"\n                data-testid=\"button-resend-verification\"\n              >\n                Resend Verification Email\n              </Button>\n              <Button\n                onClick={() => window.location.reload()}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-refresh-status\"\n              >\n                I've Verified - Refresh\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Check role requirements\n  if (requiredRole && userProfile?.role !== requiredRole) {\n    const roleNames = {\n      seeker: 'Job Seeker',\n      employer: 'Employer',\n      admin: 'Administrator',\n    };\n\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ShieldOff className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <CardTitle className=\"text-xl\">Access Restricted</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-muted-foreground\">\n              This page requires <strong>{roleNames[requiredRole]}</strong> access.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Your current role: <strong>{userProfile?.role ? roleNames[userProfile.role] : 'Unknown'}</strong>\n            </p>\n            <Button\n              onClick={() => window.history.back()}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-go-back\"\n            >\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Check employer approval status\n  if (requiredRole === 'employer' && userProfile?.role === 'employer') {\n    // Note: In a real implementation, you'd check the company approval status\n    // For now, we'll assume all employers need to be approved\n  }\n\n  return <>{children}</>;\n}\n\nexport default ProtectedRoute;\n","size_bytes":4697},"client/src/components/RoleGate.tsx":{"content":"import React from 'react';\nimport { useAuth } from '@/context/AuthProvider';\nimport { UserRole } from '@shared/schema';\n\ninterface RoleGateProps {\n  children: React.ReactNode;\n  allowedRoles: UserRole[];\n  fallback?: React.ReactNode;\n}\n\nexport function RoleGate({ children, allowedRoles, fallback = null }: RoleGateProps) {\n  const { userProfile } = useAuth();\n\n  if (!userProfile || !allowedRoles.includes(userProfile.role)) {\n    return <>{fallback}</>;\n  }\n\n  return <>{children}</>;\n}\n\ninterface RequireRoleProps {\n  children: React.ReactNode;\n  role: UserRole;\n  fallback?: React.ReactNode;\n}\n\nexport function RequireRole({ children, role, fallback = null }: RequireRoleProps) {\n  return (\n    <RoleGate allowedRoles={[role]} fallback={fallback}>\n      {children}\n    </RoleGate>\n  );\n}\n\n// Specific role components for convenience\nexport function RequireSeeker({ children, fallback = null }: { children: React.ReactNode; fallback?: React.ReactNode }) {\n  return <RequireRole role=\"seeker\" fallback={fallback}>{children}</RequireRole>;\n}\n\nexport function RequireEmployer({ children, fallback = null }: { children: React.ReactNode; fallback?: React.ReactNode }) {\n  return <RequireRole role=\"employer\" fallback={fallback}>{children}</RequireRole>;\n}\n\nexport function RequireAdmin({ children, fallback = null }: { children: React.ReactNode; fallback?: React.ReactNode }) {\n  return <RequireRole role=\"admin\" fallback={fallback}>{children}</RequireRole>;\n}\n","size_bytes":1459},"client/src/context/AuthProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User as FirebaseUser, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { getUserProfile } from '@/lib/auth';\nimport { User } from '@shared/schema';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\n\ninterface AuthContextType {\n  user: FirebaseUser | null;\n  userProfile: User | null;\n  loading: boolean;\n  refetchProfile: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<FirebaseUser | null>(null);\n  const [userProfile, setUserProfile] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchUserProfile = async (firebaseUser: FirebaseUser) => {\n    try {\n      const profile = await getUserProfile(firebaseUser.uid);\n      setUserProfile(profile);\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      setUserProfile(null);\n    }\n  };\n\n  const refetchProfile = async () => {\n    if (user) {\n      await fetchUserProfile(user);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setUser(firebaseUser);\n      \n      if (firebaseUser) {\n        await fetchUserProfile(firebaseUser);\n      } else {\n        setUserProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    userProfile,\n    loading,\n    refetchProfile,\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"mt-4 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":2285},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithPopup,\n  signInWithPhoneNumber,\n  GoogleAuthProvider,\n  RecaptchaVerifier,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n  Auth,\n  AuthError,\n  ConfirmationResult,\n  UserCredential,\n  updateProfile,\n} from \"firebase/auth\";\nimport { doc, setDoc, getDoc, serverTimestamp } from \"firebase/firestore\";\nimport { auth, db } from \"./firebase\";\nimport { User, InsertUser } from \"@shared/schema\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport interface AuthContextType {\n  user: FirebaseUser | null;\n  userProfile: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<UserCredential>;\n  signUp: (email: string, password: string, displayName: string, role?: \"seeker\" | \"employer\") => Promise<UserCredential>;\n  signInWithGoogle: () => Promise<UserCredential>;\n  signInWithPhone: (phoneNumber: string, recaptchaVerifier: RecaptchaVerifier) => Promise<ConfirmationResult>;\n  sendVerificationEmail: (user?: FirebaseUser) => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  logout: () => Promise<void>;\n  createRecaptchaVerifier: (elementId: string) => RecaptchaVerifier;\n}\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('email');\ngoogleProvider.addScope('profile');\n\n// Helper function to create user profile in Firestore\nexport async function createUserProfile(user: FirebaseUser, additionalData: Partial<InsertUser> = {}): Promise<User> {\n  const userDocRef = doc(db, 'users', user.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  \n  if (!userSnapshot.exists()) {\n    const userProfile: InsertUser = {\n      displayName: user.displayName || additionalData.displayName || 'Anonymous User',\n      email: user.email!,\n      role: additionalData.role || 'seeker',\n      emailVerified: user.emailVerified,\n      ...additionalData,\n    };\n\n    await setDoc(userDocRef, {\n      ...userProfile,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n\n    return {\n      id: user.uid,\n      ...userProfile,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n  }\n  \n  // Return existing user profile\n  const data = userSnapshot.data();\n  return {\n    id: user.uid,\n    ...data,\n    createdAt: data.createdAt?.toDate() || new Date(),\n    updatedAt: data.updatedAt?.toDate() || new Date(),\n  } as User;\n}\n\n// Helper function to get user profile from Firestore\nexport async function getUserProfile(uid: string): Promise<User | null> {\n  const userDocRef = doc(db, 'users', uid);\n  const userSnapshot = await getDoc(userDocRef);\n  \n  if (!userSnapshot.exists()) {\n    return null;\n  }\n  \n  const data = userSnapshot.data();\n  return {\n    id: uid,\n    ...data,\n    createdAt: data.createdAt?.toDate() || new Date(),\n    updatedAt: data.updatedAt?.toDate() || new Date(),\n  } as User;\n}\n\n// Auth functions\nexport const signIn = async (email: string, password: string): Promise<UserCredential> => {\n  try {\n    const result = await signInWithEmailAndPassword(auth, email, password);\n    return result;\n  } catch (error) {\n    const authError = error as AuthError;\n    let message = \"Failed to sign in\";\n    \n    switch (authError.code) {\n      case \"auth/user-not-found\":\n        message = \"No account found with this email\";\n        break;\n      case \"auth/wrong-password\":\n        message = \"Incorrect password\";\n        break;\n      case \"auth/invalid-email\":\n        message = \"Invalid email address\";\n        break;\n      case \"auth/too-many-requests\":\n        message = \"Too many failed attempts. Please try again later\";\n        break;\n      default:\n        message = authError.message;\n    }\n    \n    toast({\n      title: \"Sign In Failed\",\n      description: message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const signUp = async (\n  email: string, \n  password: string, \n  displayName: string,\n  role: \"seeker\" | \"employer\" = \"seeker\"\n): Promise<UserCredential> => {\n  try {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    \n    // Update display name\n    await updateProfile(result.user, { displayName });\n    \n    // Create user profile in Firestore\n    await createUserProfile(result.user, { displayName, role });\n    \n    // Send verification email\n    await sendEmailVerification(result.user);\n    \n    toast({\n      title: \"Account Created\",\n      description: \"Please check your email to verify your account\",\n      variant: \"default\",\n    });\n    \n    return result;\n  } catch (error) {\n    const authError = error as AuthError;\n    let message = \"Failed to create account\";\n    \n    switch (authError.code) {\n      case \"auth/email-already-in-use\":\n        message = \"An account with this email already exists\";\n        break;\n      case \"auth/invalid-email\":\n        message = \"Invalid email address\";\n        break;\n      case \"auth/weak-password\":\n        message = \"Password should be at least 6 characters\";\n        break;\n      default:\n        message = authError.message;\n    }\n    \n    toast({\n      title: \"Sign Up Failed\", \n      description: message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const signInWithGoogle = async (): Promise<UserCredential> => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    \n    // Create or update user profile in Firestore\n    await createUserProfile(result.user);\n    \n    return result;\n  } catch (error) {\n    const authError = error as AuthError;\n    let message = \"Failed to sign in with Google\";\n    \n    switch (authError.code) {\n      case \"auth/popup-blocked\":\n        message = \"Popup was blocked by your browser\";\n        break;\n      case \"auth/popup-closed-by-user\":\n        message = \"Sign in was cancelled\";\n        break;\n      case \"auth/account-exists-with-different-credential\":\n        message = \"An account already exists with the same email but different sign-in method\";\n        break;\n      default:\n        message = authError.message;\n    }\n    \n    toast({\n      title: \"Google Sign In Failed\",\n      description: message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const signInWithPhone = async (\n  phoneNumber: string,\n  recaptchaVerifier: RecaptchaVerifier\n): Promise<ConfirmationResult> => {\n  try {\n    const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptchaVerifier);\n    return confirmationResult;\n  } catch (error) {\n    const authError = error as AuthError;\n    let message = \"Failed to send verification code\";\n    \n    switch (authError.code) {\n      case \"auth/invalid-phone-number\":\n        message = \"Invalid phone number\";\n        break;\n      case \"auth/too-many-requests\":\n        message = \"Too many requests. Please try again later\";\n        break;\n      default:\n        message = authError.message;\n    }\n    \n    toast({\n      title: \"Phone Verification Failed\",\n      description: message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const sendVerificationEmail = async (user?: FirebaseUser): Promise<void> => {\n  try {\n    const currentUser = user || auth.currentUser;\n    if (!currentUser) {\n      throw new Error(\"No user is currently signed in\");\n    }\n    \n    await sendEmailVerification(currentUser);\n    \n    toast({\n      title: \"Verification Email Sent\",\n      description: \"Please check your email and click the verification link\",\n      variant: \"default\",\n    });\n  } catch (error) {\n    const authError = error as AuthError;\n    toast({\n      title: \"Failed to Send Verification Email\",\n      description: authError.message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const resetPassword = async (email: string): Promise<void> => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    \n    toast({\n      title: \"Reset Email Sent\",\n      description: \"Please check your email for password reset instructions\",\n      variant: \"default\",\n    });\n  } catch (error) {\n    const authError = error as AuthError;\n    let message = \"Failed to send reset email\";\n    \n    switch (authError.code) {\n      case \"auth/user-not-found\":\n        message = \"No account found with this email\";\n        break;\n      case \"auth/invalid-email\":\n        message = \"Invalid email address\";\n        break;\n      default:\n        message = authError.message;\n    }\n    \n    toast({\n      title: \"Password Reset Failed\",\n      description: message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const logout = async (): Promise<void> => {\n  try {\n    await signOut(auth);\n    toast({\n      title: \"Signed Out\",\n      description: \"You have been successfully signed out\",\n      variant: \"default\",\n    });\n  } catch (error) {\n    const authError = error as AuthError;\n    toast({\n      title: \"Sign Out Failed\",\n      description: authError.message,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n};\n\nexport const createRecaptchaVerifier = (elementId: string): RecaptchaVerifier => {\n  return new RecaptchaVerifier(auth, elementId, {\n    size: 'normal',\n    callback: () => {\n      // reCAPTCHA solved\n    },\n    'expired-callback': () => {\n      toast({\n        title: \"reCAPTCHA Expired\",\n        description: \"Please complete the reCAPTCHA again\",\n        variant: \"destructive\",\n      });\n    }\n  });\n};\n\n// Auth state change listener\nexport const onAuthStateChange = (callback: (user: FirebaseUser | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n","size_bytes":9620},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,\n};\n\n// Validate required config\nconst requiredConfig = {\n  apiKey: firebaseConfig.apiKey,\n  projectId: firebaseConfig.projectId,\n  appId: firebaseConfig.appId,\n};\n\nconst keyMapping = {\n  apiKey: 'VITE_FIREBASE_API_KEY',\n  projectId: 'VITE_FIREBASE_PROJECT_ID',\n  appId: 'VITE_FIREBASE_APP_ID'\n};\n\nfor (const [key, value] of Object.entries(requiredConfig)) {\n  if (!value) {\n    throw new Error(`Firebase config missing: ${keyMapping[key as keyof typeof keyMapping]}`);\n  }\n}\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n\n// Export config for use in other files\nexport { firebaseConfig };\n","size_bytes":1419},"client/src/lib/firestore.ts":{"content":"import {\n  collection,\n  doc,\n  addDoc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  startAfter,\n  serverTimestamp,\n  QueryConstraint,\n  DocumentSnapshot,\n  Query,\n  Timestamp,\n  WhereFilterOp,\n  and,\n  or,\n} from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport {\n  Job,\n  JobSearchFilters,\n  Company,\n  Application,\n  User,\n  Report,\n  AuditLog,\n  PaginatedResponse,\n  InsertJob,\n  InsertCompany,\n  InsertApplication,\n  InsertReport,\n  InsertAuditLog,\n} from \"@shared/schema\";\n\n// Collections\nexport const COLLECTIONS = {\n  USERS: 'users',\n  COMPANIES: 'companies',\n  JOBS: 'jobs',\n  APPLICATIONS: 'applications',\n  REPORTS: 'reports',\n  AUDIT_LOGS: 'auditLogs',\n} as const;\n\n// Helper to convert Firestore timestamp to Date\nexport const timestampToDate = (timestamp: any): Date => {\n  if (timestamp && typeof timestamp.toDate === 'function') {\n    return timestamp.toDate();\n  }\n  return new Date();\n};\n\n// Helper to convert Firestore document to typed object\nconst convertFirestoreDoc = <T>(doc: DocumentSnapshot, id?: string): T => {\n  const data = doc.data();\n  if (!data) {\n    throw new Error('Document does not exist');\n  }\n  \n  // Convert timestamps to dates\n  const convertedData = Object.keys(data).reduce((acc, key) => {\n    const value = data[key];\n    if (value instanceof Timestamp) {\n      acc[key] = value.toDate();\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, {} as any);\n\n  return {\n    id: id || doc.id,\n    ...convertedData,\n  } as T;\n};\n\n// Generic CRUD operations\nexport class FirestoreService<T> {\n  constructor(private collectionName: string) {}\n\n  async create(data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<T> {\n    const docRef = await addDoc(collection(db, this.collectionName), {\n      ...data,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n    \n    const doc = await getDoc(docRef);\n    return convertFirestoreDoc<T>(doc);\n  }\n\n  async createWithId(id: string, data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>): Promise<T> {\n    const docRef = doc(db, this.collectionName, id);\n    await setDoc(docRef, {\n      ...data,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n    \n    const docSnapshot = await getDoc(docRef);\n    return convertFirestoreDoc<T>(docSnapshot);\n  }\n\n  async getById(id: string): Promise<T | null> {\n    const docRef = doc(db, this.collectionName, id);\n    const docSnapshot = await getDoc(docRef);\n    \n    if (!docSnapshot.exists()) {\n      return null;\n    }\n    \n    return convertFirestoreDoc<T>(docSnapshot);\n  }\n\n  async update(id: string, data: Partial<Omit<T, 'id' | 'createdAt'>>): Promise<void> {\n    const docRef = doc(db, this.collectionName, id);\n    await updateDoc(docRef, {\n      ...data,\n      updatedAt: serverTimestamp(),\n    });\n  }\n\n  async delete(id: string): Promise<void> {\n    const docRef = doc(db, this.collectionName, id);\n    await deleteDoc(docRef);\n  }\n\n  async getAll(constraints: QueryConstraint[] = []): Promise<T[]> {\n    const q = query(collection(db, this.collectionName), ...constraints);\n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(doc => convertFirestoreDoc<T>(doc));\n  }\n\n  async getPaginated(\n    constraints: QueryConstraint[] = [],\n    pageSize: number = 20,\n    lastDoc?: DocumentSnapshot\n  ): Promise<{ items: T[]; lastDoc: DocumentSnapshot | null; hasMore: boolean }> {\n    const queryConstraints = [\n      ...constraints,\n      limit(pageSize + 1), // Get one extra to check if there are more\n    ];\n    \n    if (lastDoc) {\n      queryConstraints.push(startAfter(lastDoc));\n    }\n    \n    const q = query(collection(db, this.collectionName), ...queryConstraints);\n    const querySnapshot = await getDocs(q);\n    \n    const docs = querySnapshot.docs;\n    const hasMore = docs.length > pageSize;\n    const items = docs.slice(0, pageSize).map(doc => convertFirestoreDoc<T>(doc));\n    const newLastDoc = hasMore ? docs[pageSize - 1] : null;\n    \n    return { items, lastDoc: newLastDoc, hasMore };\n  }\n}\n\n// Service instances\nexport const userService = new FirestoreService<User>(COLLECTIONS.USERS);\nexport const companyService = new FirestoreService<Company>(COLLECTIONS.COMPANIES);\nexport const jobService = new FirestoreService<Job>(COLLECTIONS.JOBS);\nexport const applicationService = new FirestoreService<Application>(COLLECTIONS.APPLICATIONS);\nexport const reportService = new FirestoreService<Report>(COLLECTIONS.REPORTS);\nexport const auditLogService = new FirestoreService<AuditLog>(COLLECTIONS.AUDIT_LOGS);\n\n// Specialized job search function\nexport async function searchJobs(filters: JobSearchFilters): Promise<PaginatedResponse<Job>> {\n  const constraints: QueryConstraint[] = [\n    where('status', '==', 'approved'),\n  ];\n\n  // Add filters\n  if (filters.department) {\n    constraints.push(where('department', '==', filters.department));\n  }\n\n  if (filters.instituteType) {\n    constraints.push(where('instituteType', '==', filters.instituteType));\n  }\n\n  if (filters.level) {\n    constraints.push(where('level', '==', filters.level));\n  }\n\n  if (filters.employmentType) {\n    constraints.push(where('employmentType', '==', filters.employmentType));\n  }\n\n  if (filters.location) {\n    constraints.push(where('location.city', '==', filters.location));\n  }\n\n  // Date filtering for \"posted within\"\n  if (filters.postedWithin !== 'all') {\n    const now = new Date();\n    let daysAgo = 0;\n    \n    switch (filters.postedWithin) {\n      case '24h':\n        daysAgo = 1;\n        break;\n      case '7d':\n        daysAgo = 7;\n        break;\n      case '30d':\n        daysAgo = 30;\n        break;\n    }\n    \n    const dateThreshold = new Date(now.getTime() - (daysAgo * 24 * 60 * 60 * 1000));\n    constraints.push(where('createdAt', '>=', Timestamp.fromDate(dateThreshold)));\n  }\n\n  // Sorting\n  switch (filters.sortBy) {\n    case 'newest':\n      constraints.push(orderBy('createdAt', 'desc'));\n      break;\n    case 'deadline':\n      constraints.push(orderBy('lastDate', 'asc'));\n      break;\n    case 'salary_high':\n      constraints.push(orderBy('maxSalary', 'desc'));\n      break;\n    case 'salary_low':\n      constraints.push(orderBy('minSalary', 'asc'));\n      break;\n  }\n\n  // Get paginated results\n  const startIndex = (filters.page - 1) * filters.limit;\n  constraints.push(limit(filters.limit));\n\n  const q = query(collection(db, COLLECTIONS.JOBS), ...constraints);\n  const querySnapshot = await getDocs(q);\n  \n  let jobs = querySnapshot.docs.map(doc => convertFirestoreDoc<Job>(doc));\n\n  // Client-side text search if query provided\n  if (filters.query) {\n    const searchTerm = filters.query.toLowerCase();\n    jobs = jobs.filter(job => \n      job.title.toLowerCase().includes(searchTerm) ||\n      job.description.toLowerCase().includes(searchTerm) ||\n      job.qualifications.some(q => q.toLowerCase().includes(searchTerm)) ||\n      job.skills.some(s => s.toLowerCase().includes(searchTerm))\n    );\n  }\n\n  // Calculate total for pagination (this is approximate for client-side filtering)\n  const total = jobs.length;\n  const hasMore = jobs.length === filters.limit;\n\n  return {\n    items: jobs,\n    total,\n    page: filters.page,\n    limit: filters.limit,\n    hasMore,\n  };\n}\n\n// Get featured/recent jobs\nexport async function getFeaturedJobs(limitCount: number = 6): Promise<Job[]> {\n  const constraints: QueryConstraint[] = [\n    where('status', '==', 'approved'),\n    orderBy('createdAt', 'desc'),\n    limit(limitCount),\n  ];\n\n  return jobService.getAll(constraints);\n}\n\n// Get jobs by company\nexport async function getJobsByCompany(companyId: string): Promise<Job[]> {\n  const constraints: QueryConstraint[] = [\n    where('companyId', '==', companyId),\n    orderBy('createdAt', 'desc'),\n  ];\n\n  return jobService.getAll(constraints);\n}\n\n// Get applications by user\nexport async function getApplicationsByUser(uid: string): Promise<Application[]> {\n  const constraints: QueryConstraint[] = [\n    where('applicantUid', '==', uid),\n    orderBy('createdAt', 'desc'),\n  ];\n\n  return applicationService.getAll(constraints);\n}\n\n// Get applications by job\nexport async function getApplicationsByJob(jobId: string): Promise<Application[]> {\n  const constraints: QueryConstraint[] = [\n    where('jobId', '==', jobId),\n    orderBy('createdAt', 'desc'),\n  ];\n\n  return applicationService.getAll(constraints);\n}\n\n// Get pending companies for admin\nexport async function getPendingCompanies(): Promise<Company[]> {\n  const constraints: QueryConstraint[] = [\n    where('status', '==', 'pending'),\n    orderBy('createdAt', 'desc'),\n  ];\n\n  return companyService.getAll(constraints);\n}\n\n// Get pending jobs for admin\nexport async function getPendingJobs(): Promise<Job[]> {\n  const constraints: QueryConstraint[] = [\n    where('status', '==', 'pending'),\n    orderBy('createdAt', 'desc'),\n  ];\n\n  return jobService.getAll(constraints);\n}\n\n// Get company by owner\nexport async function getCompanyByOwner(ownerUid: string): Promise<Company | null> {\n  const constraints: QueryConstraint[] = [\n    where('ownerUid', '==', ownerUid),\n    limit(1),\n  ];\n\n  const companies = await companyService.getAll(constraints);\n  return companies.length > 0 ? companies[0] : null;\n}\n\n// Check if user has applied to job\nexport async function hasUserAppliedToJob(jobId: string, uid: string): Promise<boolean> {\n  const dedupeKey = `${jobId}_${uid}`;\n  const constraints: QueryConstraint[] = [\n    where('dedupeKey', '==', dedupeKey),\n    limit(1),\n  ];\n\n  const applications = await applicationService.getAll(constraints);\n  return applications.length > 0;\n}\n\n// Get job statistics\nexport async function getJobStats(): Promise<{\n  totalJobs: number;\n  approvedJobs: number;\n  pendingJobs: number;\n  totalApplications: number;\n}> {\n  const [allJobs, allApplications] = await Promise.all([\n    jobService.getAll(),\n    applicationService.getAll(),\n  ]);\n\n  const approvedJobs = allJobs.filter(job => job.status === 'approved').length;\n  const pendingJobs = allJobs.filter(job => job.status === 'pending').length;\n\n  return {\n    totalJobs: allJobs.length,\n    approvedJobs,\n    pendingJobs,\n    totalApplications: allApplications.length,\n  };\n}\n","size_bytes":10225},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"import {\n  ref,\n  uploadBytes,\n  uploadBytesResumable,\n  getDownloadURL,\n  deleteObject,\n  listAll,\n  getMetadata,\n  UploadTask,\n  UploadTaskSnapshot,\n} from \"firebase/storage\";\nimport { storage } from \"./firebase\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport interface FileUploadOptions {\n  maxSize?: number; // in bytes\n  allowedTypes?: string[];\n  onProgress?: (progress: number) => void;\n  onComplete?: (downloadURL: string) => void;\n  onError?: (error: Error) => void;\n}\n\nexport interface UploadedFile {\n  name: string;\n  size: number;\n  type: string;\n  downloadURL: string;\n  path: string;\n  uploadedAt: Date;\n}\n\n// Storage paths\nexport const STORAGE_PATHS = {\n  RESUMES: (uid: string) => `resumes/${uid}`,\n  LOGOS: (companyId: string) => `logos/${companyId}`,\n  PROOFS: (companyId: string) => `proofs/${companyId}`,\n} as const;\n\n// File type validation\nexport const FILE_TYPES = {\n  PDF: ['application/pdf'],\n  IMAGES: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\n  DOCUMENTS: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n} as const;\n\n// File size limits (in bytes)\nexport const FILE_SIZE_LIMITS = {\n  RESUME: 5 * 1024 * 1024, // 5MB\n  LOGO: 1 * 1024 * 1024, // 1MB\n  PROOF: 5 * 1024 * 1024, // 5MB\n} as const;\n\n// Validate file before upload\nexport function validateFile(\n  file: File,\n  options: Pick<FileUploadOptions, 'maxSize' | 'allowedTypes'>\n): { valid: boolean; error?: string } {\n  // Check file size\n  if (options.maxSize && file.size > options.maxSize) {\n    const maxSizeMB = (options.maxSize / (1024 * 1024)).toFixed(1);\n    return {\n      valid: false,\n      error: `File size must be less than ${maxSizeMB}MB`,\n    };\n  }\n\n  // Check file type\n  if (options.allowedTypes && !options.allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  return { valid: true };\n}\n\n// Generate unique filename\nexport function generateUniqueFilename(originalName: string): string {\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(7);\n  const extension = originalName.split('.').pop();\n  return `${timestamp}_${randomString}.${extension}`;\n}\n\n// Upload file with progress tracking\nexport async function uploadFile(\n  file: File,\n  path: string,\n  options: FileUploadOptions = {}\n): Promise<UploadedFile> {\n  try {\n    // Validate file\n    const validation = validateFile(file, {\n      maxSize: options.maxSize,\n      allowedTypes: options.allowedTypes,\n    });\n\n    if (!validation.valid) {\n      throw new Error(validation.error);\n    }\n\n    // Generate unique filename\n    const filename = generateUniqueFilename(file.name);\n    const fullPath = `${path}/${filename}`;\n    const storageRef = ref(storage, fullPath);\n\n    // Upload with progress tracking\n    return new Promise((resolve, reject) => {\n      const uploadTask = uploadBytesResumable(storageRef, file);\n\n      uploadTask.on(\n        'state_changed',\n        (snapshot: UploadTaskSnapshot) => {\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          options.onProgress?.(progress);\n        },\n        (error) => {\n          const errorMessage = getStorageErrorMessage(error);\n          toast({\n            title: \"Upload Failed\",\n            description: errorMessage,\n            variant: \"destructive\",\n          });\n          options.onError?.(error);\n          reject(error);\n        },\n        async () => {\n          try {\n            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n            const metadata = await getMetadata(storageRef);\n            \n            const uploadedFile: UploadedFile = {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n              downloadURL,\n              path: fullPath,\n              uploadedAt: new Date(metadata.timeCreated),\n            };\n\n            options.onComplete?.(downloadURL);\n            toast({\n              title: \"Upload Successful\",\n              description: `${file.name} has been uploaded successfully`,\n              variant: \"default\",\n            });\n            \n            resolve(uploadedFile);\n          } catch (error) {\n            reject(error);\n          }\n        }\n      );\n    });\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n    toast({\n      title: \"Upload Failed\",\n      description: errorMessage,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n}\n\n// Upload resume\nexport async function uploadResume(\n  file: File,\n  uid: string,\n  options: Omit<FileUploadOptions, 'maxSize' | 'allowedTypes'> = {}\n): Promise<UploadedFile> {\n  return uploadFile(file, STORAGE_PATHS.RESUMES(uid), {\n    ...options,\n    maxSize: FILE_SIZE_LIMITS.RESUME,\n    allowedTypes: [...FILE_TYPES.PDF],\n  });\n}\n\n// Upload company logo\nexport async function uploadLogo(\n  file: File,\n  companyId: string,\n  options: Omit<FileUploadOptions, 'maxSize' | 'allowedTypes'> = {}\n): Promise<UploadedFile> {\n  return uploadFile(file, STORAGE_PATHS.LOGOS(companyId), {\n    ...options,\n    maxSize: FILE_SIZE_LIMITS.LOGO,\n    allowedTypes: [...FILE_TYPES.IMAGES],\n  });\n}\n\n// Upload company proof document\nexport async function uploadProofDocument(\n  file: File,\n  companyId: string,\n  options: Omit<FileUploadOptions, 'maxSize' | 'allowedTypes'> = {}\n): Promise<UploadedFile> {\n  return uploadFile(file, STORAGE_PATHS.PROOFS(companyId), {\n    ...options,\n    maxSize: FILE_SIZE_LIMITS.PROOF,\n    allowedTypes: [...FILE_TYPES.PDF],\n  });\n}\n\n// Delete file\nexport async function deleteFile(path: string): Promise<void> {\n  try {\n    const storageRef = ref(storage, path);\n    await deleteObject(storageRef);\n    \n    toast({\n      title: \"File Deleted\",\n      description: \"File has been deleted successfully\",\n      variant: \"default\",\n    });\n  } catch (error) {\n    const errorMessage = getStorageErrorMessage(error);\n    toast({\n      title: \"Delete Failed\",\n      description: errorMessage,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n}\n\n// List files in directory\nexport async function listFiles(path: string): Promise<UploadedFile[]> {\n  try {\n    const storageRef = ref(storage, path);\n    const result = await listAll(storageRef);\n    \n    const files = await Promise.all(\n      result.items.map(async (itemRef) => {\n        const [downloadURL, metadata] = await Promise.all([\n          getDownloadURL(itemRef),\n          getMetadata(itemRef),\n        ]);\n        \n        return {\n          name: itemRef.name,\n          size: metadata.size,\n          type: metadata.contentType || 'unknown',\n          downloadURL,\n          path: itemRef.fullPath,\n          uploadedAt: new Date(metadata.timeCreated),\n        };\n      })\n    );\n    \n    return files;\n  } catch (error) {\n    const errorMessage = getStorageErrorMessage(error);\n    toast({\n      title: \"Failed to List Files\",\n      description: errorMessage,\n      variant: \"destructive\",\n    });\n    throw error;\n  }\n}\n\n// Get user's resumes\nexport async function getUserResumes(uid: string): Promise<UploadedFile[]> {\n  return listFiles(STORAGE_PATHS.RESUMES(uid));\n}\n\n// Get company's proof documents\nexport async function getCompanyProofs(companyId: string): Promise<UploadedFile[]> {\n  return listFiles(STORAGE_PATHS.PROOFS(companyId));\n}\n\n// Get storage error message\nfunction getStorageErrorMessage(error: any): string {\n  if (error.code) {\n    switch (error.code) {\n      case 'storage/object-not-found':\n        return 'File not found';\n      case 'storage/unauthorized':\n        return 'Unauthorized access to file';\n      case 'storage/canceled':\n        return 'Upload was canceled';\n      case 'storage/unknown':\n        return 'Unknown error occurred';\n      case 'storage/invalid-format':\n        return 'Invalid file format';\n      case 'storage/invalid-event-name':\n        return 'Invalid event name';\n      case 'storage/invalid-url':\n        return 'Invalid URL';\n      case 'storage/invalid-argument':\n        return 'Invalid argument';\n      case 'storage/no-default-bucket':\n        return 'No default bucket configured';\n      case 'storage/cannot-slice-blob':\n        return 'Cannot process file';\n      case 'storage/server-file-wrong-size':\n        return 'File size mismatch';\n      default:\n        return error.message || 'Storage error occurred';\n    }\n  }\n  \n  return error.message || 'Storage error occurred';\n}\n\n// Helper to create file input change handler\nexport function createFileUploadHandler(\n  uploadFunction: (file: File) => Promise<UploadedFile>,\n  onSuccess?: (file: UploadedFile) => void,\n  onError?: (error: Error) => void\n) {\n  return async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      const uploadedFile = await uploadFunction(file);\n      onSuccess?.(uploadedFile);\n    } catch (error) {\n      onError?.(error as Error);\n    }\n  };\n}\n","size_bytes":9051},"client/src/lib/types.ts":{"content":"import { User as FirebaseUser } from \"firebase/auth\";\nimport { User, UserRole, Job, Company, Application } from \"@shared/schema\";\n\n// Extended Firebase user type with profile data\nexport interface ExtendedUser extends FirebaseUser {\n  profile?: User;\n  role?: UserRole;\n}\n\n// Auth context state\nexport interface AuthState {\n  user: FirebaseUser | null;\n  userProfile: User | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// Job with company information\nexport interface JobWithCompany extends Job {\n  company: Company;\n}\n\n// Application with job and applicant information\nexport interface ApplicationWithDetails extends Application {\n  job: Job;\n  applicant: User;\n}\n\n// Search result types\nexport interface JobSearchResult {\n  jobs: JobWithCompany[];\n  total: number;\n  hasMore: boolean;\n  facets: {\n    departments: Record<string, number>;\n    instituteTypes: Record<string, number>;\n    locations: Record<string, number>;\n    levels: Record<string, number>;\n  };\n}\n\n// Dashboard statistics\nexport interface DashboardStats {\n  totalJobs: number;\n  totalApplications: number;\n  totalEmployers: number;\n  totalSeekers: number;\n  pendingJobs: number;\n  pendingEmployers: number;\n  activeJobs: number;\n}\n\n// Notification types\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n  read: boolean;\n  createdAt: Date;\n  actionUrl?: string;\n  actionLabel?: string;\n}\n\n// Form states\nexport interface FormState {\n  isSubmitting: boolean;\n  isValid: boolean;\n  errors: Record<string, string>;\n  touched: Record<string, boolean>;\n}\n\n// File upload states\nexport interface FileUploadState {\n  uploading: boolean;\n  progress: number;\n  error: string | null;\n  file: File | null;\n  uploaded: boolean;\n}\n\n// Modal states\nexport interface ModalState {\n  isOpen: boolean;\n  data?: any;\n  loading?: boolean;\n}\n\n// Filter options for jobs\nexport interface JobFilterOptions {\n  departments: Array<{ value: string; label: string; count: number }>;\n  instituteTypes: Array<{ value: string; label: string; count: number }>;\n  levels: Array<{ value: string; label: string; count: number }>;\n  locations: Array<{ value: string; label: string; count: number }>;\n  employmentTypes: Array<{ value: string; label: string; count: number }>;\n}\n\n// API request types\nexport interface ApiRequest {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  data?: any;\n  params?: Record<string, string>;\n  headers?: Record<string, string>;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: any;\n}\n\n// Component prop types\nexport interface PageProps {\n  title?: string;\n  description?: string;\n  className?: string;\n}\n\nexport interface LayoutProps extends PageProps {\n  children: React.ReactNode;\n  sidebar?: React.ReactNode;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\n// Hook return types\nexport interface UseAsyncState<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n  execute: () => Promise<void>;\n  reset: () => void;\n}\n\nexport interface UsePaginationState {\n  page: number;\n  limit: number;\n  total: number;\n  hasMore: boolean;\n  loading: boolean;\n  setPage: (page: number) => void;\n  nextPage: () => void;\n  prevPage: () => void;\n  setLimit: (limit: number) => void;\n}\n\n// Route protection types\nexport interface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: UserRole;\n  requireEmailVerification?: boolean;\n  fallback?: React.ReactNode;\n}\n\n// Search and filter types\nexport interface SearchState {\n  query: string;\n  filters: Record<string, any>;\n  sort: {\n    field: string;\n    order: 'asc' | 'desc';\n  };\n  loading: boolean;\n  results: any[];\n  total: number;\n  hasMore: boolean;\n}\n\n// Theme types\nexport type Theme = 'light' | 'dark' | 'system';\n\nexport interface ThemeState {\n  theme: Theme;\n  systemTheme: 'light' | 'dark';\n  resolvedTheme: 'light' | 'dark';\n}\n\n// Toast notification types\nexport interface ToastState {\n  id: string;\n  title?: string;\n  description?: string;\n  type: 'default' | 'success' | 'error' | 'warning';\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  duration?: number;\n}\n","size_bytes":4178},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Admin.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { getPendingCompanies, getPendingJobs, getJobStats } from '@/lib/firestore';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LoadingSpinner, PageLoadingSpinner } from '@/components/LoadingSpinner';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport { \n  Clock, \n  Briefcase, \n  Flag, \n  Users, \n  CheckCircle, \n  XCircle, \n  Building,\n  Eye,\n  BarChart,\n  Download,\n  Settings,\n  UserCheck,\n  AlertTriangle\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function Admin() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['admin-stats'],\n    queryFn: getJobStats,\n  });\n\n  const { data: pendingCompanies, isLoading: companiesLoading } = useQuery({\n    queryKey: ['pending-companies'],\n    queryFn: getPendingCompanies,\n  });\n\n  const { data: pendingJobs, isLoading: jobsLoading } = useQuery({\n    queryKey: ['pending-jobs'],\n    queryFn: getPendingJobs,\n  });\n\n  const handleApproveCompany = async (companyId: string) => {\n    // In a real app, this would call a Firebase Cloud Function\n    toast({\n      title: \"Company Approved\",\n      description: \"The company has been approved and can now post jobs.\",\n    });\n  };\n\n  const handleRejectCompany = async (companyId: string) => {\n    // In a real app, this would call a Firebase Cloud Function\n    toast({\n      title: \"Company Rejected\",\n      description: \"The company application has been rejected.\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleApproveJob = async (jobId: string) => {\n    // In a real app, this would call a Firebase Cloud Function\n    toast({\n      title: \"Job Approved\",\n      description: \"The job posting has been approved and is now visible to job seekers.\",\n    });\n  };\n\n  const handleRejectJob = async (jobId: string) => {\n    // In a real app, this would call a Firebase Cloud Function\n    toast({\n      title: \"Job Rejected\",\n      description: \"The job posting has been rejected.\",\n      variant: \"destructive\",\n    });\n  };\n\n  if (statsLoading && !stats) {\n    return <PageLoadingSpinner text=\"Loading admin dashboard...\" />;\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"admin\">\n      <div className=\"min-h-screen bg-background py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-2xl font-bold text-foreground\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage employers, jobs, and platform moderation</p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"employers\" data-testid=\"tab-employers\">Employers</TabsTrigger>\n              <TabsTrigger value=\"jobs\" data-testid=\"tab-jobs\">Jobs</TabsTrigger>\n              <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">Reports</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                        <Clock className=\"w-6 h-6 text-yellow-600\" />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">Pending Employers</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-pending-employers\">\n                          {pendingCompanies?.length || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className=\"p-3 bg-blue-100 rounded-lg\">\n                        <Briefcase className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">Pending Jobs</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-pending-jobs\">\n                          {pendingJobs?.length || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className=\"p-3 bg-red-100 rounded-lg\">\n                        <Flag className=\"w-6 h-6 text-red-600\" />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">Reports</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-reports\">\n                          0\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className=\"p-3 bg-green-100 rounded-lg\">\n                        <Users className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-users\">\n                          15,247\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8\">\n                {/* Recent Activity */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-start space-x-3\" data-testid=\"activity-item\">\n                      <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-foreground\">\n                          <span className=\"font-medium\">John Admin</span> approved employer <span className=\"font-medium\">IIT Delhi</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">2 minutes ago</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <Briefcase className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-foreground\">\n                          <span className=\"font-medium\">Sarah Admin</span> approved job posting <span className=\"font-medium\">Professor - Physics</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">15 minutes ago</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-red-100 rounded-full flex items-center justify-center\">\n                        <Flag className=\"w-4 h-4 text-red-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-foreground\">\n                          New report received for job posting <span className=\"font-medium\">Assistant Professor - Chemistry</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">1 hour ago</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Quick Actions */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Quick Actions</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-manage-roles\">\n                      <UserCheck className=\"w-4 h-4 mr-3\" />\n                      Manage User Roles\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-platform-settings\">\n                      <Settings className=\"w-4 h-4 mr-3\" />\n                      Platform Settings\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-analytics\">\n                      <BarChart className=\"w-4 h-4 mr-3\" />\n                      View Analytics\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-export-data\">\n                      <Download className=\"w-4 h-4 mr-3\" />\n                      Export Data\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Employers Tab */}\n            <TabsContent value=\"employers\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Pending Employer Reviews</CardTitle>\n                    <Badge variant=\"secondary\" data-testid=\"badge-pending-employers\">\n                      {pendingCompanies?.length || 0} Pending\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {companiesLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <LoadingSpinner text=\"Loading pending employers...\" />\n                    </div>\n                  ) : pendingCompanies && pendingCompanies.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {pendingCompanies.map((company) => (\n                        <div key={company.id} className=\"border border-border rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                                <span className=\"text-white font-bold text-sm\">\n                                  {company.name.substring(0, 2).toUpperCase()}\n                                </span>\n                              </div>\n                              <div>\n                                <h4 className=\"font-medium text-foreground\" data-testid={`company-name-${company.id}`}>\n                                  {company.name}\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground\">{company.hrEmail}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Submitted {company.createdAt.toLocaleDateString()}\n                                </p>\n                                <div className=\"flex items-center mt-2 space-x-2\">\n                                  <Badge variant=\"outline\" className=\"text-xs\">{company.instituteType}</Badge>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {company.proofDocs.length} Documents\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleApproveCompany(company.id)}\n                                data-testid={`button-approve-company-${company.id}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"destructive\"\n                                onClick={() => handleRejectCompany(company.id)}\n                                data-testid={`button-reject-company-${company.id}`}\n                              >\n                                <XCircle className=\"w-4 h-4 mr-1\" />\n                                Reject\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Building className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Pending Employers</h3>\n                      <p className=\"text-muted-foreground\">All employer applications have been reviewed.</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Jobs Tab */}\n            <TabsContent value=\"jobs\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Pending Job Reviews</CardTitle>\n                    <Badge variant=\"secondary\" data-testid=\"badge-pending-jobs\">\n                      {pendingJobs?.length || 0} Pending\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {jobsLoading ? (\n                    <div className=\"flex justify-center py-8\">\n                      <LoadingSpinner text=\"Loading pending jobs...\" />\n                    </div>\n                  ) : pendingJobs && pendingJobs.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {pendingJobs.map((job) => (\n                        <div key={job.id} className=\"border border-border rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-foreground mb-1\" data-testid={`job-title-${job.id}`}>\n                                {job.title}\n                              </h4>\n                              <p className=\"text-sm text-muted-foreground mb-2\">\n                                {job.department} • {job.level}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground mb-3\">\n                                Submitted {job.createdAt.toLocaleDateString()} • Apply by {job.lastDate.toLocaleDateString()}\n                              </p>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {job.location.city}, {job.location.state}\n                                </Badge>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {job.employmentType}\n                                </Badge>\n                                {(job.minSalary || job.maxSalary) && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {job.minSalary && job.maxSalary \n                                      ? `₹${(job.minSalary / 100000).toFixed(0)}-${(job.maxSalary / 100000).toFixed(0)} LPA`\n                                      : job.minSalary \n                                        ? `₹${(job.minSalary / 100000).toFixed(0)}+ LPA`\n                                        : `₹${(job.maxSalary! / 100000).toFixed(0)} LPA`\n                                    }\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col space-y-2 ml-4\">\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleApproveJob(job.id)}\n                                data-testid={`button-approve-job-${job.id}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"destructive\"\n                                onClick={() => handleRejectJob(job.id)}\n                                data-testid={`button-reject-job-${job.id}`}\n                              >\n                                <XCircle className=\"w-4 h-4 mr-1\" />\n                                Reject\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-job-${job.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Briefcase className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Pending Jobs</h3>\n                      <p className=\"text-muted-foreground\">All job postings have been reviewed.</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Reports Tab */}\n            <TabsContent value=\"reports\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Reports & Moderation</CardTitle>\n                    <Badge variant=\"secondary\">0 Pending</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <AlertTriangle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Reports</h3>\n                    <p className=\"text-muted-foreground\">\n                      No abuse reports have been submitted. The platform is running smoothly.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </ProtectedRoute>\n  );\n}\n\nexport default Admin;\n","size_bytes":20454},"client/src/pages/Auth.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/context/AuthProvider';\nimport { signIn, signUp, signInWithGoogle, resetPassword } from '@/lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { GraduationCap, Mail, Smartphone, Eye, EyeOff } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { UserRole } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\n\nconst signInSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  rememberMe: z.boolean().optional(),\n});\n\nconst signUpSchema = z.object({\n  displayName: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  role: z.enum(['seeker', 'employer'] as const),\n  acceptTerms: z.boolean().refine(val => val === true, 'You must accept the terms and conditions'),\n});\n\nconst resetPasswordSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\ntype SignInForm = z.infer<typeof signInSchema>;\ntype SignUpForm = z.infer<typeof signUpSchema>;\ntype ResetPasswordForm = z.infer<typeof resetPasswordSchema>;\n\nexport function Auth() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<'signin' | 'signup' | 'reset'>('signin');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Redirect if already authenticated\n  React.useEffect(() => {\n    if (user?.emailVerified) {\n      setLocation('/');\n    }\n  }, [user, setLocation]);\n\n  const signInForm = useForm<SignInForm>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n  });\n\n  const signUpForm = useForm<SignUpForm>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      displayName: '',\n      email: '',\n      password: '',\n      role: 'seeker',\n      acceptTerms: false,\n    },\n  });\n\n  const resetForm = useForm<ResetPasswordForm>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      email: '',\n    },\n  });\n\n  const onSignIn = async (data: SignInForm) => {\n    setIsLoading(true);\n    try {\n      await signIn(data.email, data.password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been signed in successfully.\",\n      });\n      setLocation('/');\n    } catch (error) {\n      console.error('Sign in error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onSignUp = async (data: SignUpForm) => {\n    setIsLoading(true);\n    try {\n      await signUp(data.email, data.password, data.displayName, data.role);\n      setLocation('/verify');\n    } catch (error) {\n      console.error('Sign up error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onResetPassword = async (data: ResetPasswordForm) => {\n    setIsLoading(true);\n    try {\n      await resetPassword(data.email);\n      setActiveTab('signin');\n    } catch (error) {\n      console.error('Reset password error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    try {\n      await signInWithGoogle();\n      setLocation('/');\n    } catch (error) {\n      console.error('Google sign in error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"shadow-lg border border-border\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <GraduationCap className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-foreground\">Welcome to EduHire</CardTitle>\n            <p className=\"text-muted-foreground mt-2\">Sign in to your account or create a new one</p>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              {/* Sign In Form */}\n              <TabsContent value=\"signin\" className=\"space-y-4\">\n                <form onSubmit={signInForm.handleSubmit(onSignIn)} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signin-email\">Email Address</Label>\n                    <Input\n                      id=\"signin-email\"\n                      type=\"email\"\n                      placeholder=\"your.email@university.edu\"\n                      {...signInForm.register('email')}\n                      data-testid=\"input-signin-email\"\n                    />\n                    {signInForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">{signInForm.formState.errors.email.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signin-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"signin-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter your password\"\n                        {...signInForm.register('password')}\n                        data-testid=\"input-signin-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    {signInForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive\">{signInForm.formState.errors.password.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"remember-me\" \n                        {...signInForm.register('rememberMe')}\n                      />\n                      <Label htmlFor=\"remember-me\" className=\"text-sm\">Remember me</Label>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"link\"\n                      size=\"sm\"\n                      onClick={() => setActiveTab('reset')}\n                      className=\"p-0 h-auto\"\n                      data-testid=\"button-forgot-password\"\n                    >\n                      Forgot password?\n                    </Button>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={isLoading}\n                    data-testid=\"button-signin\"\n                  >\n                    {isLoading ? <LoadingSpinner size=\"sm\" /> : 'Sign In'}\n                  </Button>\n                </form>\n\n                <div className=\"relative my-6\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-border\"></div>\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-2 bg-card text-muted-foreground\">Or continue with</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={handleGoogleSignIn}\n                    disabled={isLoading}\n                    data-testid=\"button-google-signin\"\n                  >\n                    <Mail className=\"w-5 h-5 mr-2\" />\n                    Continue with Google\n                  </Button>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    className=\"w-full\"\n                    disabled={true}\n                    data-testid=\"button-phone-signin\"\n                  >\n                    <Smartphone className=\"w-5 h-5 mr-2\" />\n                    Continue with Phone (Coming Soon)\n                  </Button>\n                </div>\n              </TabsContent>\n\n              {/* Sign Up Form */}\n              <TabsContent value=\"signup\" className=\"space-y-4\">\n                <form onSubmit={signUpForm.handleSubmit(onSignUp)} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-name\">Full Name</Label>\n                    <Input\n                      id=\"signup-name\"\n                      type=\"text\"\n                      placeholder=\"Dr. John Smith\"\n                      {...signUpForm.register('displayName')}\n                      data-testid=\"input-signup-name\"\n                    />\n                    {signUpForm.formState.errors.displayName && (\n                      <p className=\"text-sm text-destructive\">{signUpForm.formState.errors.displayName.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-email\">Email Address</Label>\n                    <Input\n                      id=\"signup-email\"\n                      type=\"email\"\n                      placeholder=\"your.email@university.edu\"\n                      {...signUpForm.register('email')}\n                      data-testid=\"input-signup-email\"\n                    />\n                    {signUpForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">{signUpForm.formState.errors.email.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"signup-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Create a strong password\"\n                        {...signUpForm.register('password')}\n                        data-testid=\"input-signup-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    {signUpForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive\">{signUpForm.formState.errors.password.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-role\">I am a</Label>\n                    <Select value={signUpForm.watch('role')} onValueChange={(value) => signUpForm.setValue('role', value as 'seeker' | 'employer')}>\n                      <SelectTrigger data-testid=\"select-user-role\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"seeker\">Job Seeker (Faculty)</SelectItem>\n                        <SelectItem value=\"employer\">Employer (Institution/HR)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-start space-x-2\">\n                    <Checkbox \n                      id=\"accept-terms\"\n                      {...signUpForm.register('acceptTerms')}\n                      data-testid=\"checkbox-accept-terms\"\n                    />\n                    <Label htmlFor=\"accept-terms\" className=\"text-sm leading-5\">\n                      I agree to the <Link href=\"/terms\" className=\"text-primary hover:text-primary/80\">Terms of Service</Link> and{' '}\n                      <Link href=\"/privacy\" className=\"text-primary hover:text-primary/80\">Privacy Policy</Link>\n                    </Label>\n                  </div>\n                  {signUpForm.formState.errors.acceptTerms && (\n                    <p className=\"text-sm text-destructive\">{signUpForm.formState.errors.acceptTerms.message}</p>\n                  )}\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={isLoading}\n                    data-testid=\"button-signup\"\n                  >\n                    {isLoading ? <LoadingSpinner size=\"sm\" /> : 'Create Account'}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            {/* Reset Password Form */}\n            {activeTab === 'reset' && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Reset Password</h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Enter your email address and we'll send you a reset link\n                  </p>\n                </div>\n\n                <form onSubmit={resetForm.handleSubmit(onResetPassword)} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reset-email\">Email Address</Label>\n                    <Input\n                      id=\"reset-email\"\n                      type=\"email\"\n                      placeholder=\"your.email@university.edu\"\n                      {...resetForm.register('email')}\n                      data-testid=\"input-reset-email\"\n                    />\n                    {resetForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">{resetForm.formState.errors.email.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex space-x-3\">\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\" \n                      className=\"flex-1\"\n                      onClick={() => setActiveTab('signin')}\n                      data-testid=\"button-back-signin\"\n                    >\n                      Back to Sign In\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1\"\n                      disabled={isLoading}\n                      data-testid=\"button-send-reset\"\n                    >\n                      {isLoading ? <LoadingSpinner size=\"sm\" /> : 'Send Reset Link'}\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default Auth;\n","size_bytes":16591},"client/src/pages/EmailVerification.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useAuth } from '@/context/AuthProvider';\nimport { sendVerificationEmail, logout } from '@/lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { MailCheck, RefreshCw, Mail, ArrowLeft } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function EmailVerification() {\n  const { user, refetchProfile } = useAuth();\n  const { toast } = useToast();\n  const [isResending, setIsResending] = useState(false);\n  const [isCheckingStatus, setIsCheckingStatus] = useState(false);\n  const [newEmail, setNewEmail] = useState('');\n  const [showChangeEmail, setShowChangeEmail] = useState(false);\n\n  React.useEffect(() => {\n    // Redirect if already verified\n    if (user?.emailVerified) {\n      window.location.href = '/';\n    }\n  }, [user?.emailVerified]);\n\n  React.useEffect(() => {\n    // Check verification status every 30 seconds\n    const interval = setInterval(async () => {\n      if (user && !user.emailVerified) {\n        await user.reload();\n        await refetchProfile();\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [user, refetchProfile]);\n\n  const handleResendVerification = async () => {\n    if (!user) return;\n\n    setIsResending(true);\n    try {\n      await sendVerificationEmail(user);\n    } catch (error) {\n      console.error('Error resending verification email:', error);\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  const handleCheckStatus = async () => {\n    if (!user) return;\n\n    setIsCheckingStatus(true);\n    try {\n      await user.reload();\n      await refetchProfile();\n      \n      if (user.emailVerified) {\n        toast({\n          title: \"Email Verified!\",\n          description: \"Your email has been verified successfully.\",\n        });\n        window.location.href = '/';\n      } else {\n        toast({\n          title: \"Not Verified Yet\",\n          description: \"Please check your email and click the verification link.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error checking verification status:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to check verification status. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCheckingStatus(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Authentication Required</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You need to be signed in to verify your email.\n          </p>\n          <Link href=\"/auth\">\n            <Button>Sign In</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"shadow-lg border border-border\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <MailCheck className=\"w-8 h-8 text-accent\" />\n            </div>\n            <CardTitle className=\"text-xl font-bold text-foreground\">Verify Your Email</CardTitle>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                We've sent a verification link to:\n              </p>\n              <div className=\"bg-muted rounded-lg p-3 mb-6\">\n                <p className=\"font-medium text-foreground break-all\" data-testid=\"text-user-email\">\n                  {user.email}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Please check your email and click the verification link to activate your account.\n                Don't forget to check your spam folder.\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleResendVerification}\n                disabled={isResending}\n                className=\"w-full\"\n                data-testid=\"button-resend-verification\"\n              >\n                {isResending ? (\n                  <LoadingSpinner size=\"sm\" />\n                ) : (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Resend Verification Email\n                  </>\n                )}\n              </Button>\n\n              <Button \n                onClick={handleCheckStatus}\n                disabled={isCheckingStatus}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-check-status\"\n              >\n                {isCheckingStatus ? (\n                  <LoadingSpinner size=\"sm\" />\n                ) : (\n                  \"I've Verified - Check Status\"\n                )}\n              </Button>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-card text-muted-foreground\">Need help?</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full\"\n                onClick={() => setShowChangeEmail(!showChangeEmail)}\n                data-testid=\"button-change-email\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Change Email Address\n              </Button>\n\n              {showChangeEmail && (\n                <div className=\"space-y-3 p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"new-email\">New Email Address</Label>\n                    <Input\n                      id=\"new-email\"\n                      type=\"email\"\n                      value={newEmail}\n                      onChange={(e) => setNewEmail(e.target.value)}\n                      placeholder=\"new.email@university.edu\"\n                      data-testid=\"input-new-email\"\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Note: Changing your email will require you to sign in again with the new email.\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" disabled className=\"flex-1\">\n                      Update Email (Coming Soon)\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => setShowChangeEmail(false)}\n                      className=\"flex-1\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-between items-center pt-4 border-t border-border\">\n              <Link href=\"/auth\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-auth\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Sign In\n                </Button>\n              </Link>\n\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={handleSignOut}\n                data-testid=\"button-sign-out\"\n              >\n                Sign Out\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default EmailVerification;\n","size_bytes":8404},"client/src/pages/Employer.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthProvider';\nimport { getCompanyByOwner, getJobsByCompany } from '@/lib/firestore';\nimport { uploadLogo, uploadProofDocument } from '@/lib/storage';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LoadingSpinner, PageLoadingSpinner } from '@/components/LoadingSpinner';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport { \n  Building, \n  MapPin, \n  Globe, \n  Mail, \n  Phone, \n  Upload, \n  FileText, \n  Download, \n  Plus, \n  Edit, \n  Clock,\n  CheckCircle,\n  XCircle,\n  Users,\n  Briefcase,\n  Eye,\n  HelpCircle,\n  MessageCircle\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { InstituteType } from '@shared/schema';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst companyFormSchema = z.object({\n  name: z.string().min(2, 'Company name must be at least 2 characters'),\n  website: z.string().url().optional().or(z.literal('')),\n  instituteType: InstituteType,\n  hrEmail: z.string().email('Please enter a valid email address'),\n  phone: z.string().optional(),\n  address: z.string().min(10, 'Please provide a complete address'),\n});\n\ntype CompanyForm = z.infer<typeof companyFormSchema>;\n\nexport function Employer() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('profile');\n\n  const { data: company, isLoading: companyLoading } = useQuery({\n    queryKey: ['employer-company', user?.uid],\n    queryFn: () => user?.uid ? getCompanyByOwner(user.uid) : null,\n    enabled: !!user?.uid,\n  });\n\n  const { data: jobs, isLoading: jobsLoading } = useQuery({\n    queryKey: ['employer-jobs', company?.id],\n    queryFn: () => company?.id ? getJobsByCompany(company.id) : [],\n    enabled: !!company?.id,\n  });\n\n  const form = useForm<CompanyForm>({\n    resolver: zodResolver(companyFormSchema),\n    defaultValues: {\n      name: '',\n      website: '',\n      instituteType: 'Private University' as InstituteType,\n      hrEmail: '',\n      phone: '',\n      address: '',\n    },\n  });\n\n  React.useEffect(() => {\n    if (company) {\n      form.reset({\n        name: company.name,\n        website: company.website || '',\n        instituteType: company.instituteType,\n        hrEmail: company.hrEmail,\n        phone: company.phone || '',\n        address: company.address,\n      });\n    }\n  }, [company, form]);\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async (data: CompanyForm) => {\n      // In a real app, this would call an API to update the company\n      toast({\n        title: \"Company Updated\",\n        description: \"Company profile has been updated successfully.\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['employer-company'] });\n    },\n  });\n\n  const onSubmit = (data: CompanyForm) => {\n    updateCompanyMutation.mutate(data);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'rejected':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'expired':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  if (companyLoading) {\n    return <PageLoadingSpinner text=\"Loading employer dashboard...\" />;\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"employer\">\n      <div className=\"min-h-screen bg-background py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Status Banner */}\n          {company?.status === 'pending' && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-8\">\n              <div className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 text-yellow-600 mr-3\" />\n                <div>\n                  <h3 className=\"text-sm font-medium text-yellow-800\">Account Under Review</h3>\n                  <p className=\"text-sm text-yellow-700 mt-1\">\n                    Your employer account is pending admin approval. You'll be able to post jobs once verified.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {company?.status === 'rejected' && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-8\">\n              <div className=\"flex items-center\">\n                <XCircle className=\"w-5 h-5 text-red-600 mr-3\" />\n                <div>\n                  <h3 className=\"text-sm font-medium text-red-800\">Account Rejected</h3>\n                  <p className=\"text-sm text-red-700 mt-1\">\n                    Your employer account has been rejected. Please contact support for more information.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-8\">\n            {/* Main Content */}\n            <div className=\"xl:col-span-3\">\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Company Profile</TabsTrigger>\n                  <TabsTrigger value=\"jobs\" data-testid=\"tab-jobs\">Posted Jobs</TabsTrigger>\n                  <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">Applications</TabsTrigger>\n                </TabsList>\n\n                {/* Company Profile Tab */}\n                <TabsContent value=\"profile\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>Company Profile</CardTitle>\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-company\">\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                        {/* Company Header */}\n                        <div className=\"flex items-center space-x-4 mb-6\">\n                          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                            <span className=\"text-white font-bold text-sm\">\n                              {company?.name ? company.name.substring(0, 3).toUpperCase() : 'COM'}\n                            </span>\n                          </div>\n                          <div>\n                            <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"company-name\">\n                              {company?.name || 'New Company'}\n                            </h2>\n                            <p className=\"text-muted-foreground\">{company?.instituteType}</p>\n                          </div>\n                        </div>\n\n                        {/* Form Fields */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"name\">Company/Institution Name *</Label>\n                            <Input\n                              id=\"name\"\n                              {...form.register('name')}\n                              data-testid=\"input-company-name\"\n                            />\n                            {form.formState.errors.name && (\n                              <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"instituteType\">Institute Type *</Label>\n                            <Select \n                              value={form.watch('instituteType')} \n                              onValueChange={(value: InstituteType) => form.setValue('instituteType', value)}\n                            >\n                              <SelectTrigger data-testid=\"select-institute-type\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"IIT\">IIT</SelectItem>\n                                <SelectItem value=\"NIT\">NIT</SelectItem>\n                                <SelectItem value=\"IIIT\">IIIT</SelectItem>\n                                <SelectItem value=\"Central University\">Central University</SelectItem>\n                                <SelectItem value=\"State University\">State University</SelectItem>\n                                <SelectItem value=\"Private University\">Private University</SelectItem>\n                                <SelectItem value=\"Deemed University\">Deemed University</SelectItem>\n                                <SelectItem value=\"Research Institute\">Research Institute</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"website\">Website</Label>\n                            <Input\n                              id=\"website\"\n                              type=\"url\"\n                              placeholder=\"https://www.company.edu\"\n                              {...form.register('website')}\n                              data-testid=\"input-website\"\n                            />\n                            {form.formState.errors.website && (\n                              <p className=\"text-sm text-destructive\">{form.formState.errors.website.message}</p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"hrEmail\">HR Email *</Label>\n                            <Input\n                              id=\"hrEmail\"\n                              type=\"email\"\n                              placeholder=\"hr@company.edu\"\n                              {...form.register('hrEmail')}\n                              data-testid=\"input-hr-email\"\n                            />\n                            {form.formState.errors.hrEmail && (\n                              <p className=\"text-sm text-destructive\">{form.formState.errors.hrEmail.message}</p>\n                            )}\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"phone\">Phone Number</Label>\n                            <Input\n                              id=\"phone\"\n                              type=\"tel\"\n                              placeholder=\"+91 12345 67890\"\n                              {...form.register('phone')}\n                              data-testid=\"input-phone\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"address\">Address *</Label>\n                          <Textarea\n                            id=\"address\"\n                            placeholder=\"Complete address including city, state, and pincode\"\n                            rows={3}\n                            {...form.register('address')}\n                            data-testid=\"textarea-address\"\n                          />\n                          {form.formState.errors.address && (\n                            <p className=\"text-sm text-destructive\">{form.formState.errors.address.message}</p>\n                          )}\n                        </div>\n\n                        {/* Verification Documents */}\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-foreground\">Verification Documents</h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <Card>\n                              <CardContent className=\"p-4\">\n                                <h4 className=\"font-medium text-foreground mb-2\">Certificate of Incorporation</h4>\n                                {company?.proofDocs && company.proofDocs.length > 0 ? (\n                                  <div className=\"flex items-center justify-between bg-muted rounded-lg p-3\">\n                                    <div className=\"flex items-center\">\n                                      <FileText className=\"w-5 h-5 text-muted-foreground mr-3\" />\n                                      <div>\n                                        <p className=\"text-sm font-medium text-foreground\">incorporation_cert.pdf</p>\n                                        <p className=\"text-xs text-muted-foreground\">1.2 MB</p>\n                                      </div>\n                                    </div>\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <Download className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                ) : (\n                                  <div className=\"border-2 border-dashed border-border rounded-lg p-4 text-center\">\n                                    <Upload className=\"w-6 h-6 text-muted-foreground mx-auto mb-2\" />\n                                    <p className=\"text-sm text-muted-foreground\">Upload document</p>\n                                    <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" data-testid=\"button-upload-docs\">\n                                      Choose File\n                                    </Button>\n                                  </div>\n                                )}\n                              </CardContent>\n                            </Card>\n\n                            <Card>\n                              <CardContent className=\"p-4\">\n                                <h4 className=\"font-medium text-foreground mb-2\">Authorization Letter</h4>\n                                <div className=\"border-2 border-dashed border-border rounded-lg p-4 text-center\">\n                                  <Upload className=\"w-6 h-6 text-muted-foreground mx-auto mb-2\" />\n                                  <p className=\"text-sm text-muted-foreground\">Upload document</p>\n                                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                                    Choose File\n                                  </Button>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-end\">\n                          <Button \n                            type=\"submit\" \n                            disabled={updateCompanyMutation.isPending}\n                            data-testid=\"button-save-company\"\n                          >\n                            {updateCompanyMutation.isPending ? (\n                              <LoadingSpinner size=\"sm\" />\n                            ) : (\n                              'Save Changes'\n                            )}\n                          </Button>\n                        </div>\n                      </form>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Posted Jobs Tab */}\n                <TabsContent value=\"jobs\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>Posted Jobs</CardTitle>\n                        <Button \n                          disabled={company?.status !== 'approved'}\n                          data-testid=\"button-post-job\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Post New Job\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {jobsLoading ? (\n                        <div className=\"flex justify-center py-8\">\n                          <LoadingSpinner text=\"Loading jobs...\" />\n                        </div>\n                      ) : jobs && jobs.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {jobs.map((job) => (\n                            <div key={job.id} className=\"border border-border rounded-lg p-4\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-semibold text-foreground mb-1\" data-testid={`job-title-${job.id}`}>\n                                    {job.title}\n                                  </h4>\n                                  <p className=\"text-sm text-muted-foreground mb-2\">\n                                    Posted on {job.createdAt.toLocaleDateString()} • Apply by {job.lastDate.toLocaleDateString()}\n                                  </p>\n                                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                    <div className=\"flex items-center\">\n                                      <Users className=\"w-4 h-4 mr-1\" />\n                                      <span>{job.applicationCount || 0} Applications</span>\n                                    </div>\n                                    <div className=\"flex items-center\">\n                                      <Eye className=\"w-4 h-4 mr-1\" />\n                                      <span>{job.viewCount || 0} Views</span>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center space-x-3\">\n                                  <Badge className={getStatusColor(job.status)} data-testid={`job-status-${job.id}`}>\n                                    {job.status.charAt(0).toUpperCase() + job.status.slice(1)}\n                                  </Badge>\n                                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-job-${job.id}`}>\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Briefcase className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Jobs Posted Yet</h3>\n                          <p className=\"text-muted-foreground mb-4\">\n                            {company?.status === 'approved' \n                              ? \"Start posting jobs to attract qualified candidates.\" \n                              : \"Complete your profile verification to start posting jobs.\"\n                            }\n                          </p>\n                          <Button \n                            disabled={company?.status !== 'approved'}\n                            data-testid=\"button-post-first-job\"\n                          >\n                            Post Your First Job\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Applications Tab */}\n                <TabsContent value=\"applications\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Job Applications</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center py-8\">\n                        <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Applications Yet</h3>\n                        <p className=\"text-muted-foreground\">\n                          Applications will appear here once candidates start applying to your jobs.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"xl:col-span-1 space-y-6\">\n              {/* Quick Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Stats</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total Jobs Posted</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"stat-total-jobs\">\n                      {jobs?.length || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Active Applications</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"stat-applications\">\n                      {jobs?.reduce((total, job) => total + (job.applicationCount || 0), 0) || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Profile Views</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"stat-views\">\n                      {jobs?.reduce((total, job) => total + (job.viewCount || 0), 0) || 0}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Verification Status */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Verification Status</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                    <span className=\"text-sm text-foreground\">Email Verified</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                    <span className=\"text-sm text-foreground\">Company Details</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    {getStatusIcon(company?.status === 'approved' ? 'approved' : 'pending')}\n                    <span className=\"text-sm text-foreground ml-3\">Document Review</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    {getStatusIcon(company?.status || 'pending')}\n                    <span className=\"text-sm text-foreground ml-3\">Admin Approval</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Support */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Need Help?</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-help-guide\">\n                    <HelpCircle className=\"w-4 h-4 mr-2\" />\n                    View Guide\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-contact-support\">\n                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                    Contact Support\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ProtectedRoute>\n  );\n}\n\nexport default Employer;\n","size_bytes":25614},"client/src/pages/Home.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Search, MapPin, Calendar, Briefcase, ArrowRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { getFeaturedJobs } from '@/lib/firestore';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { Job } from '@shared/schema';\n\nexport function Home() {\n  const { data: featuredJobs, isLoading } = useQuery({\n    queryKey: ['featured-jobs'],\n    queryFn: () => getFeaturedJobs(6),\n  });\n\n  const departments = [\n    'Mathematics',\n    'Statistics', \n    'Control Theory',\n    'Computer Science',\n    'Physics',\n  ];\n\n  const getCompanyInitials = (companyName: string) => {\n    return companyName\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 3);\n  };\n\n  const formatSalary = (min?: number, max?: number, currency = 'INR') => {\n    if (!min && !max) return null;\n    \n    const formatAmount = (amount: number) => {\n      if (amount >= 100000) {\n        return `₹${(amount / 100000).toFixed(0)}L`;\n      }\n      return `₹${(amount / 1000).toFixed(0)}K`;\n    };\n\n    if (min && max) {\n      return `${formatAmount(min)} - ${formatAmount(max)}`;\n    }\n    return formatAmount(min || max!);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-b from-primary/5 to-background py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl lg:text-6xl font-bold text-foreground mb-6\">\n              Find Your Perfect<br />\n              <span className=\"text-primary\">Academic Position</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n              Connect with leading educational institutions across India. Discover faculty positions in Mathematics, Statistics, Control Theory, and more.\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"max-w-4xl mx-auto mb-12\">\n              <Card className=\"p-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4\">\n                  <div className=\"lg:col-span-2\">\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">Position or Keywords</label>\n                    <Input \n                      placeholder=\"e.g., Assistant Professor Mathematics\" \n                      className=\"h-12\"\n                      data-testid=\"input-search-keywords\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">Location</label>\n                    <Select>\n                      <SelectTrigger className=\"h-12\">\n                        <SelectValue placeholder=\"All Locations\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Locations</SelectItem>\n                        <SelectItem value=\"delhi\">Delhi</SelectItem>\n                        <SelectItem value=\"mumbai\">Mumbai</SelectItem>\n                        <SelectItem value=\"bangalore\">Bangalore</SelectItem>\n                        <SelectItem value=\"chennai\">Chennai</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-end\">\n                    <Link href=\"/jobs\" className=\"w-full\">\n                      <Button className=\"w-full h-12\" data-testid=\"button-search-jobs\">\n                        <Search className=\"w-5 h-5 mr-2\" />\n                        Search Jobs\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Quick Categories */}\n            <div className=\"flex flex-wrap justify-center gap-3\">\n              {departments.map((dept) => (\n                <Link key={dept} href={`/jobs?department=${dept.toLowerCase().replace(' ', '-')}`}>\n                  <Button \n                    variant=\"secondary\" \n                    className=\"rounded-full\"\n                    data-testid={`button-category-${dept.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {dept}\n                  </Button>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Jobs */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Featured Positions</h2>\n            <p className=\"text-lg text-muted-foreground\">Latest opportunities from top institutions</p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex justify-center\">\n              <LoadingSpinner size=\"lg\" text=\"Loading featured jobs...\" />\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {featuredJobs?.map((job) => (\n                <Card key={job.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`job-card-${job.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-white font-bold text-sm\" data-testid={`company-logo-${job.id}`}>\n                            {/* In real implementation, this would be fetched from company data */}\n                            IIT\n                          </span>\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-foreground\" data-testid={`job-title-${job.id}`}>\n                            {job.title}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`job-company-${job.id}`}>\n                            {/* In real implementation, this would be fetched from company data */}\n                            Loading Company...\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"secondary\" data-testid={`job-badge-${job.id}`}>\n                        New\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <MapPin className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`job-location-${job.id}`}>\n                          {job.location.city}, {job.location.state}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`job-deadline-${job.id}`}>\n                          Apply by {job.lastDate.toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <Briefcase className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`job-type-${job.id}`}>{job.employmentType}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {job.qualifications.slice(0, 2).map((qual, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {qual}\n                        </Badge>\n                      ))}\n                    </div>\n\n                    <Link href={`/jobs/${job.id}`}>\n                      <Button className=\"w-full\" data-testid={`button-view-job-${job.id}`}>\n                        View Details\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/jobs\">\n              <Button variant=\"outline\" size=\"lg\" data-testid=\"button-view-all-jobs\">\n                View All Jobs\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\" data-testid=\"stat-active-positions\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-primary mb-2\">2,500+</div>\n              <div className=\"text-muted-foreground\">Active Positions</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-partner-institutions\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-primary mb-2\">450+</div>\n              <div className=\"text-muted-foreground\">Partner Institutions</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-registered-candidates\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-primary mb-2\">15,000+</div>\n              <div className=\"text-muted-foreground\">Registered Candidates</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"stat-success-rate\">\n              <div className=\"text-3xl lg:text-4xl font-bold text-primary mb-2\">85%</div>\n              <div className=\"text-muted-foreground\">Success Rate</div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Home;\n","size_bytes":10501},"client/src/pages/JobDetails.tsx":{"content":"import React from 'react';\nimport { useRoute, Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { jobService, hasUserAppliedToJob } from '@/lib/firestore';\nimport { useAuth } from '@/context/AuthProvider';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { PageLoadingSpinner } from '@/components/LoadingSpinner';\nimport { \n  MapPin, \n  Calendar, \n  Briefcase, \n  Clock, \n  Building,\n  Users,\n  GraduationCap,\n  Star,\n  Share2,\n  ArrowLeft,\n  ExternalLink\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\nexport function JobDetails() {\n  const [, params] = useRoute('/jobs/:id');\n  const jobId = params?.id;\n  const { user } = useAuth();\n\n  const { data: job, isLoading: jobLoading } = useQuery({\n    queryKey: ['job', jobId],\n    queryFn: () => jobId ? jobService.getById(jobId) : null,\n    enabled: !!jobId,\n  });\n\n  const { data: hasApplied, isLoading: applicationLoading } = useQuery({\n    queryKey: ['job-application', jobId, user?.uid],\n    queryFn: () => jobId && user?.uid ? hasUserAppliedToJob(jobId, user.uid) : false,\n    enabled: !!jobId && !!user?.uid,\n  });\n\n  if (jobLoading) {\n    return <PageLoadingSpinner text=\"Loading job details...\" />;\n  }\n\n  if (!job) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Job Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            The job you're looking for doesn't exist or has been removed.\n          </p>\n          <Link href=\"/jobs\">\n            <Button>Browse Other Jobs</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const handleApply = () => {\n    if (!user) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to apply for this job\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!user.emailVerified) {\n      toast({\n        title: \"Email Verification Required\",\n        description: \"Please verify your email to apply for jobs\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Navigate to application page or open modal\n    // This would typically open an application modal or navigate to application page\n    toast({\n      title: \"Application Started\",\n      description: \"Redirecting to application form...\",\n      variant: \"default\",\n    });\n  };\n\n  const handleShare = async () => {\n    try {\n      await navigator.share({\n        title: job.title,\n        text: `Check out this ${job.level} position at ${job.instituteType}`,\n        url: window.location.href,\n      });\n    } catch (error) {\n      // Fallback to copying URL\n      await navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link Copied\",\n        description: \"Job link has been copied to clipboard\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  const formatSalary = (min?: number, max?: number) => {\n    if (!min && !max) return null;\n    \n    const formatAmount = (amount: number) => {\n      if (amount >= 100000) {\n        return `₹${(amount / 100000).toFixed(0)} LPA`;\n      }\n      return `₹${(amount / 1000).toFixed(0)}K per month`;\n    };\n\n    if (min && max) {\n      return `${formatAmount(min)} - ${formatAmount(max)}`;\n    }\n    return formatAmount(min || max!);\n  };\n\n  const isExpired = new Date(job.lastDate) < new Date();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <Link href=\"/jobs\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-jobs\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Jobs\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Job Header */}\n            <Card>\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    {/* Company Logo */}\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-white font-bold text-sm\">\n                        {job.instituteType.substring(0, 3)}\n                      </span>\n                    </div>\n                    <div>\n                      <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"job-title\">\n                        {job.title}\n                      </h1>\n                      <p className=\"text-lg text-muted-foreground mb-3\" data-testid=\"job-institute\">\n                        {job.instituteType} • {job.department}\n                      </p>\n                      <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"w-4 h-4 mr-1\" />\n                          <span data-testid=\"job-location\">\n                            {job.location.city}, {job.location.state}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Briefcase className=\"w-4 h-4 mr-1\" />\n                          <span>{job.employmentType}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          <span data-testid=\"job-deadline\">\n                            Apply by {job.lastDate.toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleShare} data-testid=\"button-share\">\n                      <Share2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Job Stats */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"job-views\">\n                      {job.viewCount || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Views</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"job-applications\">\n                      {job.applicationCount || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Applications</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {Math.ceil((job.lastDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Days Left</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {job.level === 'Assistant Professor' ? '★★☆☆☆' : \n                       job.level === 'Associate Professor' ? '★★★☆☆' : '★★★★☆'}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Level</div>\n                  </div>\n                </div>\n\n                {/* Tags */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"default\">{job.level}</Badge>\n                  <Badge variant=\"secondary\">{job.department}</Badge>\n                  <Badge variant=\"outline\">{job.employmentType}</Badge>\n                  {formatSalary(job.minSalary, job.maxSalary) && (\n                    <Badge variant=\"secondary\" data-testid=\"job-salary\">\n                      {formatSalary(job.minSalary, job.maxSalary)}\n                    </Badge>\n                  )}\n                  {isExpired && <Badge variant=\"destructive\">Expired</Badge>}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Job Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Job Description</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <p className=\"text-foreground whitespace-pre-wrap\" data-testid=\"job-description\">\n                    {job.description}\n                  </p>\n                </div>\n\n                {job.requirements && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Requirements</h3>\n                      <p className=\"text-foreground whitespace-pre-wrap\">\n                        {job.requirements}\n                      </p>\n                    </div>\n                  </>\n                )}\n\n                {job.responsibilities.length > 0 && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Key Responsibilities</h3>\n                      <ul className=\"space-y-2\">\n                        {job.responsibilities.map((responsibility, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <span className=\"w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                            <span className=\"text-foreground\">{responsibility}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </>\n                )}\n\n                {job.qualifications.length > 0 && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Required Qualifications</h3>\n                      <ul className=\"space-y-2\">\n                        {job.qualifications.map((qualification, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <GraduationCap className=\"w-4 h-4 mt-1 mr-3 text-primary flex-shrink-0\" />\n                            <span className=\"text-foreground\">{qualification}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </>\n                )}\n\n                {job.skills.length > 0 && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Preferred Skills</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {job.skills.map((skill, index) => (\n                          <Badge key={index} variant=\"outline\">\n                            {skill}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Apply Section */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {!isExpired ? (\n                    hasApplied ? (\n                      <div className=\"text-center\">\n                        <Badge variant=\"secondary\" className=\"mb-3\">Already Applied</Badge>\n                        <p className=\"text-sm text-muted-foreground\">\n                          You have already applied for this position. We'll notify you about any updates.\n                        </p>\n                      </div>\n                    ) : (\n                      <>\n                        <Button \n                          className=\"w-full\" \n                          size=\"lg\"\n                          onClick={handleApply}\n                          disabled={applicationLoading}\n                          data-testid=\"button-apply-job\"\n                        >\n                          {applicationLoading ? 'Checking...' : 'Apply Now'}\n                        </Button>\n                        {job.applyMode === 'external' && job.applyUrl && (\n                          <Link href={job.applyUrl} target=\"_blank\">\n                            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-external-apply\">\n                              <ExternalLink className=\"w-4 h-4 mr-2\" />\n                              Apply on Company Site\n                            </Button>\n                          </Link>\n                        )}\n                      </>\n                    )\n                  ) : (\n                    <div className=\"text-center\">\n                      <Badge variant=\"destructive\" className=\"mb-3\">Application Closed</Badge>\n                      <p className=\"text-sm text-muted-foreground\">\n                        The application deadline for this position has passed.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Job Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Job Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Position Level</span>\n                  <span className=\"font-medium\">{job.level}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Department</span>\n                  <span className=\"font-medium\">{job.department}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Employment Type</span>\n                  <span className=\"font-medium\">{job.employmentType}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Institute Type</span>\n                  <span className=\"font-medium\">{job.instituteType}</span>\n                </div>\n                {formatSalary(job.minSalary, job.maxSalary) && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">Salary Range</span>\n                    <span className=\"font-medium\">{formatSalary(job.minSalary, job.maxSalary)}</span>\n                  </div>\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Posted On</span>\n                  <span className=\"font-medium\">{job.createdAt.toLocaleDateString()}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Similar Jobs */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Similar Positions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {/* This would typically show similar jobs */}\n                <p className=\"text-sm text-muted-foreground\">\n                  Loading similar positions...\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default JobDetails;\n","size_bytes":16406},"client/src/pages/Jobs.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { searchJobs } from '@/lib/firestore';\nimport { JobSearchFilters, Department, InstituteType, JobLevel, EmploymentType } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { LoadingSpinner, PageLoadingSpinner } from '@/components/LoadingSpinner';\nimport { \n  MapPin, \n  Calendar, \n  Briefcase, \n  Clock, \n  Search,\n  Filter,\n  ChevronLeft,\n  ChevronRight\n} from 'lucide-react';\n\nexport function Jobs() {\n  const [filters, setFilters] = useState<JobSearchFilters>({\n    page: 1,\n    limit: 20,\n    sortBy: 'newest',\n    postedWithin: 'all',\n  });\n\n  const { data: jobResults, isLoading, refetch } = useQuery({\n    queryKey: ['jobs', filters],\n    queryFn: () => searchJobs(filters),\n  });\n\n  const handleFilterChange = (key: keyof JobSearchFilters, value: any) => {\n    // Convert 'all-*' values to undefined for filtering\n    const filterValue = value?.startsWith?.('all-') ? undefined : value;\n    setFilters(prev => ({\n      ...prev,\n      [key]: filterValue,\n      page: 1, // Reset to first page when changing filters\n    }));\n  };\n\n  const handleSearch = () => {\n    refetch();\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setFilters(prev => ({ ...prev, page: newPage }));\n  };\n\n  if (isLoading && !jobResults) {\n    return <PageLoadingSpinner text=\"Loading jobs...\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Filter Bar */}\n      <section className=\"bg-card border-b border-border py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Faculty Positions</h1>\n              <p className=\"text-muted-foreground mt-1\" data-testid=\"text-job-count\">\n                {jobResults?.total ? `${jobResults.total}+ positions available` : 'Loading...'}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 lg:mt-0\">\n              <Select \n                value={filters.sortBy} \n                onValueChange={(value: JobSearchFilters['sortBy']) => \n                  handleFilterChange('sortBy', value)\n                }\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Sort by: Newest</SelectItem>\n                  <SelectItem value=\"deadline\">Sort by: Deadline</SelectItem>\n                  <SelectItem value=\"salary_high\">Sort by: Salary High</SelectItem>\n                  <SelectItem value=\"salary_low\">Sort by: Salary Low</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" size=\"icon\">\n                <Filter className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"space-y-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search by title, keywords, or skills...\"\n                  value={filters.query || ''}\n                  onChange={(e) => handleFilterChange('query', e.target.value)}\n                  className=\"h-10\"\n                  data-testid=\"input-job-search\"\n                />\n              </div>\n              <Button onClick={handleSearch} data-testid=\"button-search\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n              <Select\n                value={filters.department}\n                onValueChange={(value: Department) => handleFilterChange('department', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Departments\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-departments\">All Departments</SelectItem>\n                  <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                  <SelectItem value=\"Statistics\">Statistics</SelectItem>\n                  <SelectItem value=\"Control Theory\">Control Theory</SelectItem>\n                  <SelectItem value=\"Computer Science\">Computer Science</SelectItem>\n                  <SelectItem value=\"Physics\">Physics</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select\n                value={filters.instituteType}\n                onValueChange={(value: InstituteType) => handleFilterChange('instituteType', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Institute Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-institute-types\">All Institute Types</SelectItem>\n                  <SelectItem value=\"IIT\">IIT</SelectItem>\n                  <SelectItem value=\"NIT\">NIT</SelectItem>\n                  <SelectItem value=\"State University\">State University</SelectItem>\n                  <SelectItem value=\"Private University\">Private University</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select\n                value={filters.level}\n                onValueChange={(value: JobLevel) => handleFilterChange('level', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Levels\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-levels\">All Levels</SelectItem>\n                  <SelectItem value=\"Assistant Professor\">Assistant Professor</SelectItem>\n                  <SelectItem value=\"Associate Professor\">Associate Professor</SelectItem>\n                  <SelectItem value=\"Professor\">Professor</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select\n                value={filters.location}\n                onValueChange={(value: string) => handleFilterChange('location', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Locations\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-locations\">All Locations</SelectItem>\n                  <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                  <SelectItem value=\"Mumbai\">Mumbai</SelectItem>\n                  <SelectItem value=\"Bangalore\">Bangalore</SelectItem>\n                  <SelectItem value=\"Chennai\">Chennai</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select\n                value={filters.postedWithin}\n                onValueChange={(value: JobSearchFilters['postedWithin']) => \n                  handleFilterChange('postedWithin', value)\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Posted Anytime</SelectItem>\n                  <SelectItem value=\"24h\">Last 24 hours</SelectItem>\n                  <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button \n                onClick={handleSearch}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-apply-filters\"\n              >\n                Apply Filters\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Jobs List */}\n      <section className=\"py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"flex justify-center py-12\">\n              <LoadingSpinner size=\"lg\" text=\"Searching jobs...\" />\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {jobResults?.items.map((job) => (\n                <Card key={job.id} className=\"hover:shadow-md transition-shadow\" data-testid={`job-listing-${job.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start space-x-4\">\n                          {/* Company Logo Placeholder */}\n                          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0\">\n                            <span className=\"text-white font-bold text-sm\">\n                              {/* In real implementation, get company initials */}\n                              {job.instituteType.substring(0, 3)}\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between\">\n                              <div>\n                                <Link href={`/jobs/${job.id}`}>\n                                  <h3 className=\"text-lg font-semibold text-foreground mb-1 hover:text-primary transition-colors\" data-testid={`job-title-${job.id}`}>\n                                    {job.title}\n                                  </h3>\n                                </Link>\n                                <p className=\"text-muted-foreground mb-2\" data-testid={`job-institute-type-${job.id}`}>\n                                  {job.instituteType} • {job.department}\n                                </p>\n                                \n                                <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n                                  <div className=\"flex items-center\">\n                                    <MapPin className=\"w-4 h-4 mr-1\" />\n                                    <span data-testid={`job-location-${job.id}`}>\n                                      {job.location.city}, {job.location.state}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex items-center\">\n                                    <Briefcase className=\"w-4 h-4 mr-1\" />\n                                    <span>{job.employmentType}</span>\n                                  </div>\n                                  <div className=\"flex items-center\">\n                                    <Calendar className=\"w-4 h-4 mr-1\" />\n                                    <span>Posted {new Date(job.createdAt).toLocaleDateString()}</span>\n                                  </div>\n                                  <div className=\"flex items-center\">\n                                    <Clock className=\"w-4 h-4 mr-1\" />\n                                    <span data-testid={`job-deadline-${job.id}`}>\n                                      Apply by {job.lastDate.toLocaleDateString()}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex flex-col items-end ml-4\">\n                                {(job.minSalary || job.maxSalary) && (\n                                  <Badge variant=\"secondary\" className=\"mb-2\">\n                                    {job.minSalary && job.maxSalary \n                                      ? `₹${(job.minSalary / 100000).toFixed(0)}-${(job.maxSalary / 100000).toFixed(0)} LPA`\n                                      : job.minSalary \n                                        ? `₹${(job.minSalary / 100000).toFixed(0)}+ LPA`\n                                        : `₹${(job.maxSalary! / 100000).toFixed(0)} LPA`\n                                    }\n                                  </Badge>\n                                )}\n                                <Link href={`/jobs/${job.id}`}>\n                                  <Button data-testid={`button-apply-${job.id}`}>\n                                    Apply Now\n                                  </Button>\n                                </Link>\n                              </div>\n                            </div>\n                            \n                            <div className=\"mt-4\">\n                              <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`job-description-${job.id}`}>\n                                {job.description}\n                              </p>\n                              <div className=\"flex flex-wrap gap-2\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {job.level}\n                                </Badge>\n                                {job.qualifications.slice(0, 2).map((qual, index) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {qual}\n                                  </Badge>\n                                ))}\n                                {job.skills.slice(0, 2).map((skill, index) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {skill}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n\n              {/* Empty State */}\n              {jobResults?.items.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Search className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No jobs found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Try adjusting your search criteria or filters\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setFilters({ page: 1, limit: 20, sortBy: 'newest', postedWithin: 'all' })}\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear All Filters\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Pagination */}\n          {jobResults && jobResults.items.length > 0 && (\n            <div className=\"flex items-center justify-between mt-12\">\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {((filters.page - 1) * filters.limit) + 1}-{Math.min(filters.page * filters.limit, jobResults.total)} of {jobResults.total}+ results\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handlePageChange(filters.page - 1)}\n                  disabled={filters.page === 1}\n                  data-testid=\"button-prev-page\"\n                >\n                  <ChevronLeft className=\"w-4 h-4 mr-1\" />\n                  Previous\n                </Button>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {Array.from({ length: Math.min(5, Math.ceil(jobResults.total / filters.limit)) }, (_, i) => {\n                    const page = i + 1;\n                    return (\n                      <Button\n                        key={page}\n                        variant={page === filters.page ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => handlePageChange(page)}\n                        data-testid={`button-page-${page}`}\n                      >\n                        {page}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handlePageChange(filters.page + 1)}\n                  disabled={!jobResults.hasMore}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                  <ChevronRight className=\"w-4 h-4 ml-1\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Jobs;\n","size_bytes":17487},"client/src/pages/Profile.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthProvider';\nimport { getUserResumes, uploadResume, deleteFile } from '@/lib/storage';\nimport { getApplicationsByUser } from '@/lib/firestore';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { LoadingSpinner, PageLoadingSpinner } from '@/components/LoadingSpinner';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar, \n  Upload, \n  FileText, \n  Download, \n  Trash, \n  Edit,\n  Plus,\n  ExternalLink,\n  MailCheck,\n  GraduationCap\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Department } from '@shared/schema';\n\nexport function Profile() {\n  const { user, userProfile } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const { data: resumes, isLoading: resumesLoading } = useQuery({\n    queryKey: ['user-resumes', user?.uid],\n    queryFn: () => user?.uid ? getUserResumes(user.uid) : [],\n    enabled: !!user?.uid,\n  });\n\n  const { data: applications, isLoading: applicationsLoading } = useQuery({\n    queryKey: ['user-applications', user?.uid],\n    queryFn: () => user?.uid ? getApplicationsByUser(user.uid) : [],\n    enabled: !!user?.uid,\n  });\n\n  const uploadResumeMutation = useMutation({\n    mutationFn: async (file: File) => {\n      if (!user?.uid) throw new Error('User not authenticated');\n      \n      setIsUploading(true);\n      setUploadProgress(0);\n      \n      return uploadResume(file, user.uid, {\n        onProgress: (progress) => setUploadProgress(progress),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['user-resumes'] });\n      toast({\n        title: \"Resume Uploaded\",\n        description: \"Your resume has been uploaded successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsUploading(false);\n      setUploadProgress(0);\n    },\n  });\n\n  const deleteResumeMutation = useMutation({\n    mutationFn: deleteFile,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['user-resumes'] });\n      toast({\n        title: \"Resume Deleted\",\n        description: \"Your resume has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadResumeMutation.mutate(file);\n    }\n  };\n\n  const handleDeleteResume = (resumePath: string) => {\n    if (confirm('Are you sure you want to delete this resume?')) {\n      deleteResumeMutation.mutate(resumePath);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'reviewed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'offered':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <ProtectedRoute requiredRole=\"seeker\">\n      <div className=\"min-h-screen bg-background py-8\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Profile Header */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h1 className=\"text-2xl font-bold text-foreground\">My Profile</h1>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-profile\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Profile\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                <div className=\"lg:col-span-1\">\n                  <div className=\"text-center\">\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-primary/80 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <span className=\"text-2xl font-bold text-primary-foreground\" data-testid=\"user-avatar\">\n                        {userProfile?.displayName ? getInitials(userProfile.displayName) : 'U'}\n                      </span>\n                    </div>\n                    <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"user-name\">\n                      {userProfile?.displayName || 'Anonymous User'}\n                    </h2>\n                    <p className=\"text-muted-foreground\">Mathematics Professor</p>\n                    <div className=\"flex items-center justify-center mt-2\">\n                      <MailCheck className=\"w-4 h-4 text-accent mr-2\" />\n                      <span className=\"text-sm text-accent\">Email Verified</span>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-8 space-y-4\">\n                    <div className=\"flex items-center text-sm\">\n                      <Mail className=\"w-4 h-4 text-muted-foreground mr-3\" />\n                      <span data-testid=\"user-email\">{user?.email}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Phone className=\"w-4 h-4 text-muted-foreground mr-3\" />\n                      <span>+91 98765 43210</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <MapPin className=\"w-4 h-4 text-muted-foreground mr-3\" />\n                      <span>New Delhi, India</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Calendar className=\"w-4 h-4 text-muted-foreground mr-3\" />\n                      <span>15 years experience</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"lg:col-span-2 space-y-6\">\n                  {/* Resume Upload Section */}\n                  <div className=\"border border-border rounded-lg p-6\">\n                    <h3 className=\"font-semibold text-foreground mb-4\">Resume/CV</h3>\n                    \n                    {resumesLoading ? (\n                      <div className=\"flex justify-center py-4\">\n                        <LoadingSpinner text=\"Loading resumes...\" />\n                      </div>\n                    ) : resumes && resumes.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {resumes.map((resume) => (\n                          <div key={resume.path} className=\"flex items-center justify-between bg-muted rounded-lg p-3\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"w-5 h-5 text-muted-foreground mr-3\" />\n                              <div>\n                                <p className=\"text-sm font-medium text-foreground\" data-testid={`resume-name-${resume.name}`}>\n                                  {resume.name}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Uploaded {resume.uploadedAt.toLocaleDateString()} • {(resume.size / (1024 * 1024)).toFixed(1)} MB\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => window.open(resume.downloadURL, '_blank')}\n                                data-testid={`button-download-${resume.name}`}\n                              >\n                                <Download className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleDeleteResume(resume.path)}\n                                disabled={deleteResumeMutation.isPending}\n                                data-testid={`button-delete-${resume.name}`}\n                              >\n                                <Trash className=\"w-4 h-4 text-destructive\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\">\n                        <Upload className=\"w-8 h-8 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          No resume uploaded yet\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mb-4\">\n                          Upload your resume to apply for jobs\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Upload Button */}\n                    <div className=\"mt-4\">\n                      <input\n                        type=\"file\"\n                        accept=\".pdf\"\n                        onChange={handleFileUpload}\n                        className=\"hidden\"\n                        id=\"resume-upload\"\n                        data-testid=\"input-resume-upload\"\n                      />\n                      <label htmlFor=\"resume-upload\">\n                        <Button \n                          disabled={isUploading}\n                          className=\"w-full cursor-pointer\"\n                          data-testid=\"button-upload-resume\"\n                          asChild\n                        >\n                          {isUploading ? (\n                            <>\n                              <LoadingSpinner size=\"sm\" />\n                              Uploading... {Math.round(uploadProgress)}%\n                            </>\n                          ) : (\n                            <>\n                              <Upload className=\"w-4 h-4 mr-2\" />\n                              Upload New Resume\n                            </>\n                          )}\n                        </Button>\n                      </label>\n                      <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                        PDF format only, max 5MB\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Skills & Qualifications */}\n                  <div className=\"border border-border rounded-lg p-6\">\n                    <h3 className=\"font-semibold text-foreground mb-4\">Skills & Qualifications</h3>\n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <Label className=\"block text-sm font-medium text-foreground mb-2\">Highest Qualification</Label>\n                        <Input \n                          defaultValue=\"Ph.D. in Mathematics\" \n                          className=\"w-full\"\n                          data-testid=\"input-qualification\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"block text-sm font-medium text-foreground mb-2\">Specialization</Label>\n                        <Input \n                          defaultValue=\"Applied Mathematics, Numerical Analysis\" \n                          className=\"w-full\"\n                          data-testid=\"input-specialization\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"mb-4\">\n                      <Label className=\"block text-sm font-medium text-foreground mb-2\">Skills</Label>\n                      <div className=\"flex flex-wrap gap-2 mb-3\">\n                        {['MATLAB', 'Python', 'LaTeX', 'Research', 'Teaching'].map((skill) => (\n                          <Badge key={skill} variant=\"secondary\" data-testid={`skill-${skill.toLowerCase()}`}>\n                            {skill}\n                          </Badge>\n                        ))}\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-skill\">\n                          <Plus className=\"w-3 h-3 mr-1\" />\n                          Add Skill\n                        </Button>\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"block text-sm font-medium text-foreground mb-2\">About Me</Label>\n                      <Textarea \n                        placeholder=\"Tell us about your experience, research interests, and career goals...\"\n                        rows={4}\n                        data-testid=\"textarea-about\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Applications History */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>My Applications</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Select defaultValue=\"all\">\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Applications</SelectItem>\n                      <SelectItem value=\"submitted\">Submitted</SelectItem>\n                      <SelectItem value=\"reviewed\">Under Review</SelectItem>\n                      <SelectItem value=\"shortlisted\">Shortlisted</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {applicationsLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <LoadingSpinner text=\"Loading applications...\" />\n                </div>\n              ) : applications && applications.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {applications.map((application) => (\n                    <div key={application.id} className=\"border border-border rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                              <span className=\"text-white font-bold text-sm\">IIT</span>\n                            </div>\n                            <div>\n                              <h4 className=\"font-semibold text-foreground\" data-testid={`application-title-${application.id}`}>\n                                Loading Job Title...\n                              </h4>\n                              <p className=\"text-sm text-muted-foreground\">Loading Company...</p>\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                Applied on {application.createdAt.toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge \n                            className={getStatusColor(application.status)} \n                            data-testid={`application-status-${application.id}`}\n                          >\n                            {application.status.charAt(0).toUpperCase() + application.status.slice(1)}\n                          </Badge>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-application-${application.id}`}>\n                            <ExternalLink className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <GraduationCap className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Applications Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    You haven't applied to any jobs yet. Start browsing available positions.\n                  </p>\n                  <Button data-testid=\"button-browse-jobs\">\n                    Browse Jobs\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </ProtectedRoute>\n  );\n}\n\nexport default Profile;\n","size_bytes":18221},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/types/express.d.ts":{"content":"import \"express\";\n\ndeclare global {\n  namespace Express {\n    interface UserPayload {\n      uid: string;\n      email?: string;\n      email_verified?: boolean;\n      role?: string;\n      [key: string]: any;\n    }\n    interface Request {\n      user?: UserPayload;\n    }\n  }\n}\n\nexport {};","size_bytes":285},"server/types/sendgrid-mail.d.ts":{"content":"declare module '@sendgrid/mail' {\n  const sgMail: any;\n  export default sgMail;\n}","size_bytes":81},"replit.md":{"content":"# Overview\n\nEduHire Faculty is a comprehensive academic job marketplace platform that connects faculty members with educational institutions across India. The application features a multi-tier role-based system with job seekers (faculty), employers (institutions/HR), and administrators managing the entire ecosystem. The platform emphasizes security through mandatory email verification and admin-moderated approval workflows for employers and job postings.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built with modern React architecture using Next.js 14 with App Router and TypeScript for type safety. The UI layer leverages Tailwind CSS combined with shadcn/ui components for consistent design and Radix UI primitives for accessibility. The application uses Wouter for client-side routing and React Hook Form with Zod validation for robust form handling. State management is handled through TanStack Query for server state and React Context for authentication state.\n\n## Backend Architecture\nThe backend follows a hybrid approach combining Express.js server with Firebase services. The Express server handles API routes and serves the React application in development via Vite middleware. Authentication and real-time data are managed through Firebase Auth and Firestore, while file storage utilizes Firebase Storage. The architecture also includes Firebase Cloud Functions for server-side operations like user profile creation and admin actions.\n\n## Database Design\nThe application uses Firestore as the primary database with collections for users, companies, jobs, applications, reports, and audit logs. Additionally, there's a PostgreSQL database configured with Drizzle ORM for potential relational data needs. The schema is strongly typed using Zod schemas shared between client and server, ensuring data consistency across the application.\n\n## Authentication & Authorization\nAuthentication is built on Firebase Auth supporting email/password, Google OAuth, and phone number verification. The system enforces mandatory email verification before accessing protected features. Role-based access control is implemented using Firebase custom claims with three distinct roles: seekers (default), employers (requires admin approval), and admins. Protected routes are secured through middleware and React route guards.\n\n## File Management System\nFile uploads are handled through Firebase Storage with specific paths for different file types (resumes, company logos, proof documents). The system includes validation for file types, size limits, and progress tracking for uploads. Resume uploads are restricted to PDF format with a 5MB limit, while company documents support multiple formats.\n\n# External Dependencies\n\n## Firebase Services\n- **Firebase Auth**: User authentication with email/password, Google OAuth, and phone verification\n- **Firestore**: NoSQL database for storing user profiles, companies, jobs, applications, and reports\n- **Firebase Storage**: File storage for resumes, company logos, and verification documents\n- **Firebase Cloud Functions**: Server-side functions for user management and admin operations\n\n## Database & ORM\n- **PostgreSQL**: Relational database via Neon serverless\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL operations\n\n## Email Services\n- **SendGrid**: Email delivery service for verification emails, notifications, and password reset functionality\n\n## UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Accessible component primitives for form controls, navigation, and overlays\n- **Lucide Icons**: Icon library for consistent iconography\n\n## Development & Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESLint**: Code linting and formatting\n- **Wouter**: Lightweight client-side routing library","size_bytes":4028}},"version":1}